<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Yen3's note (note)</title><link>https://yen3.github.io/</link><description></description><atom:link type="application/rss+xml" rel="self" href="https://yen3.github.io/categories/note.xml"></atom:link><language>en</language><lastBuildDate>Tue, 05 Apr 2016 03:58:45 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>A primer's note for parallel programming in Haskell</title><link>https://yen3.github.io/posts/2016/20160405_a-primer-s-note-for-parallel-programming-in-haskell/</link><dc:creator>Yen3</dc:creator><description>&lt;div&gt;&lt;ul&gt;
&lt;li&gt;Functional Thursday #33&lt;/li&gt;
&lt;li&gt;2015.12.03&lt;/li&gt;
&lt;li&gt;Yen3 (yen3rc@gmail.com)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;About the slide&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;這份投影片是 &lt;a href="http://chimera.labs.oreilly.com/books/1230000000929"&gt;Parallel and Concurrent Programming in Haskell&lt;/a&gt; -
  Chatper 1 ~ 5 的筆記&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主題包含 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eval monad &lt;/li&gt;
&lt;li&gt;Par monad&lt;/li&gt;
&lt;li&gt;Repa&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;今天的內容皆與 data-level parallelism 相關 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;在 Haskell 中，一個較容易平行化 function 是 &lt;code&gt;map&lt;/code&gt;，這份投影片會很常
  討論到它。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Definition of Parallel&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;parallel&lt;/strong&gt; program is one that uses a multiplicity of computational
  hardware (e.g., several processor cores) to perform a computation more
  quickly.&lt;/li&gt;
&lt;li&gt;Parallel programming in Haskell is deterministic: The parallel program always
  produces the same answer, regardless of how many processors are used to run
  it.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-------&gt;

&lt;!--## Self-study --&gt;

&lt;!--- 在進入正題之前，先談幾個小筆記--&gt;

&lt;!--- Normal form, weak-head normal form and `force` function--&gt;

&lt;!--- unboxed type &amp; boxed type--&gt;

&lt;!--- Bang patterns--&gt;

&lt;!--- Data.Vector package--&gt;

&lt;hr&gt;
&lt;h4&gt;The status of value in ghc (1/)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;There are three conditions of a value.&lt;ul&gt;
&lt;li&gt;Unevaluated &lt;/li&gt;
&lt;li&gt;Weak-Head Normal Form (WHNF) - evaluated with first constructor&lt;/li&gt;
&lt;li&gt;Normal Form (NF) - fully evaluated&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;The status of value in ghc (2/)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sprint&lt;/code&gt; - prints a value without forcing its evaluation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seq&lt;/code&gt;: only far as the first constructor and doesn't evaluate any more of
  the structure. It evaluates first argument to WHNF.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;seq&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;


&lt;hr&gt;
&lt;h4&gt;The status of value in ghc (3/)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Example &lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sprint&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="nf"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sprint&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="nf"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sprint&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="nf"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sprint&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="nf"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/pre&gt;


&lt;hr&gt;
&lt;h4&gt;The status of value in ghc (4/)&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sprint&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;
&lt;span class="nf"&gt;xs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sprint&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;
&lt;span class="nf"&gt;xs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sprint&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;
&lt;span class="nf"&gt;xs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;
&lt;span class="mi"&gt;65&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sprint&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;
&lt;span class="nf"&gt;xs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;hr&gt;
&lt;h4&gt;&lt;code&gt;force&lt;/code&gt; function&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;force&lt;/code&gt; - fully evaluated it's argument and returns it. (WHNF into NF)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.DeepSeq&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;NFData&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
    &lt;span class="n"&gt;rnf&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;      &lt;span class="c1"&gt;-- reduce to normal-form&lt;/span&gt;
    &lt;span class="n"&gt;rnf&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;

&lt;span class="nf"&gt;deepseq&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;NFData&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="nf"&gt;deepseq&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rnf&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; 

&lt;span class="nf"&gt;force&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;NFData&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;   
&lt;span class="nf"&gt;force&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;deepseq&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;seq&lt;/code&gt;: only far as the first constructor and doesn't evaluate any more of
  the structure. It evaluates first argument to WHNF.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- deepseq: fully evaluates its argument and then returns () --&gt;

&lt;hr&gt;
&lt;h4&gt;Eval monad&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Decoupling of the algorithm from the parallelism&lt;/li&gt;
&lt;li&gt;The type declaration for eval monad &lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Eval&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kt"&gt;Monad&lt;/span&gt; &lt;span class="kt"&gt;Eval&lt;/span&gt;

&lt;span class="nf"&gt;runEval&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Eval&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="nf"&gt;rpar&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Eval&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;   &lt;span class="c1"&gt;-- rpar :: Strategy a &lt;/span&gt;
&lt;span class="nf"&gt;rseq&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Eval&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;   &lt;span class="c1"&gt;-- rseq :: Strategy a&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rpar&lt;/code&gt; - evaluate its argument in parallel.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rseq&lt;/code&gt; - Evaluate the argument and wait for the result.&lt;ul&gt;
&lt;li&gt;evaluates its argument to WHNF.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
- The argument of `rpar` is also named **spark**.
--&gt;

&lt;hr&gt;
&lt;h4&gt;Eval monad - simple example&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Example&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;runEval&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;rpar&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;rseq&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rseq&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/24606632@N05/26219016196/in/dateposted-public/" title="eval_monad_simple_example"&gt;&lt;img src="https://farm2.staticflickr.com/1717/26219016196_6d47d9e102.jpg" width="800" height="328" alt="eval_monad_simple_example"&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Eval monad - Strategy&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Strategy - modularize parllel code by separating the algorithm from the
  parallelism &lt;ul&gt;
&lt;li&gt;use &lt;code&gt;using&lt;/code&gt; function to add parallelism with the existing codes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;withStrategy&lt;/code&gt;- a another version of &lt;code&gt;using&lt;/code&gt; with the arguments flipped&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Strategy&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Eval&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;

&lt;span class="nf"&gt;using&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Strategy&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="nf"&gt;x&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runEval&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;withStrategy&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Strategy&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="nf"&gt;withStrategy&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runEval&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;hr&gt;
&lt;h4&gt;Eval monad - Strategy&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;rpar&lt;/code&gt;, &lt;code&gt;rseq&lt;/code&gt; are also Strategies.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;rpar&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Strategy&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="nf"&gt;rseq&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Strategy&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;You could write the algorithm first and add the parallelism code later
  ideally.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Eval monad - example for pair&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Example&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Parallel.Strategies&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.DeepSeq&lt;/span&gt;

&lt;span class="nf"&gt;evalPair&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Strategy&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Strategy&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Strategy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;evalPair&lt;/span&gt; &lt;span class="n"&gt;sa&lt;/span&gt; &lt;span class="n"&gt;sb&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;a'&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;sa&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="n"&gt;b'&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;sb&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;hr&gt;
&lt;h4&gt;Eval monad - example for pair&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;rparWith&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Strategy&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Strategy&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="nf"&gt;rparWith&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;ra&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;rpar&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="n"&gt;sa&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ra&lt;/span&gt;
        &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sa&lt;/span&gt; 

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;             &lt;span class="c1"&gt;-- (1-1)  &lt;/span&gt;
&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;-- (1-2)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;rpar&lt;/span&gt;   &lt;span class="c1"&gt;-- (2-1)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;evalPair&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rparWith&lt;/span&gt; &lt;span class="n"&gt;rseq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rparWith&lt;/span&gt; &lt;span class="n"&gt;rseq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;-- (2-2)--&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;evalPair&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rparWith&lt;/span&gt; &lt;span class="n"&gt;rseq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rparWith&lt;/span&gt; &lt;span class="n"&gt;rseq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;-- (2-2)&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;(1-1), (1-2) - sequential version&lt;/li&gt;
&lt;li&gt;(2-1), (2-2) - parallel version and reduce the value to WHNF&lt;/li&gt;
&lt;/ul&gt;
wzxhzdk:10


- (3-1), (3-2) - parallel version and reduce the value to NF 
- `parTuple2` and `evalPair` functions are the same
--&amp;gt;

&lt;hr&gt;
&lt;h4&gt;Eval monad - some help functions (1/)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;About some helper function&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rdeepseq&lt;/code&gt; - evaluates the argument to NF &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;rdeepseq&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;NFData&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Strategy&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="nf"&gt;rdeepseq&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rseq&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;pre class="code literal-block"&gt;- `rparWith` - wraps the Strategy s in an `rpar`
&lt;/pre&gt;


&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;rparWith&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Strategy&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Strategy&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; 
&lt;/pre&gt;


&lt;hr&gt;
&lt;h4&gt;Eval monad - some help functions (2/)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The code reduced to NF in previous slide could also be written as &lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="c1"&gt;-- NF &lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;rparWith&lt;/span&gt; &lt;span class="n"&gt;rdeepseq&lt;/span&gt; 
&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt;
    &lt;span class="n"&gt;evalPair&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rparWith&lt;/span&gt; &lt;span class="n"&gt;rdeepseq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rparWith&lt;/span&gt; &lt;span class="n"&gt;rdeepseq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;hr&gt;
&lt;h4&gt;Eval monad - parallelize &lt;code&gt;map&lt;/code&gt;&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;parMap&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;parMap&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;parList&lt;/span&gt; &lt;span class="n"&gt;rseq&lt;/span&gt; 

&lt;span class="nf"&gt;evalList&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Strategy&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Strategy&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;evalList&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
&lt;span class="nf"&gt;evalList&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;x'&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="n"&gt;xs'&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;evalList&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x'&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xs'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;parList&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Strategy&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Strategy&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;parList&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;evalList&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rparWith&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;parMap&lt;/code&gt; will calculate its list to WHNF&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parList&lt;/code&gt; - evaluate the list element in parallel &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Eval monad&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Example&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Parallel.Strategies&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.DeepSeq&lt;/span&gt;

&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;-- (1) &lt;/span&gt;
&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;parList&lt;/span&gt; &lt;span class="n"&gt;rseq&lt;/span&gt; &lt;span class="c1"&gt;-- (2)&lt;/span&gt;
&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;parList&lt;/span&gt; &lt;span class="n"&gt;rdeepseq&lt;/span&gt;  &lt;span class="c1"&gt;-- (3)&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;(1) sequential version&lt;/li&gt;
&lt;li&gt;(2) parallelize version reduce value to WHNF&lt;/li&gt;
&lt;li&gt;(3) parallelize version reduce value to NF &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Example - Mandelbrot set&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You could get more details
  from &lt;a href="https://yen3.github.io/posts/2015/20150625_haskell-practice-mandelbrot-binary/"&gt;my blog post&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;some type define&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Point&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Range&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Plane&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;sequential version&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;planePoints&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Plane&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Vector&lt;/span&gt; &lt;span class="kt"&gt;Point&lt;/span&gt;

&lt;span class="nf"&gt;mandelSet&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Plane&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Vector&lt;/span&gt; &lt;span class="kt"&gt;Point&lt;/span&gt;
&lt;span class="nf"&gt;mandelSet&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;planeToMandelPoints&lt;/span&gt;
&lt;/pre&gt;


&lt;hr&gt;
&lt;h4&gt;Example - Mandelbrot set&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;basic parallel version with &lt;code&gt;parList&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;splitPlane&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Integer&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Plane&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Plane&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nf"&gt;mandelSetStart&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Integer&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Plane&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Vector&lt;/span&gt; &lt;span class="kt"&gt;Point&lt;/span&gt;
&lt;span class="nf"&gt;mandelSetStart&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;planeToMandelPoints&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;splitPlane&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;parList&lt;/span&gt; &lt;span class="n"&gt;rseq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;In  2010 late MBP15 (Intel Core i5 2.4 Ghz, 8Gb)&lt;ul&gt;
&lt;li&gt;sequential - about 45 secs&lt;/li&gt;
&lt;li&gt;run in 2 cores - about 25 secs (&lt;code&gt;./Mandelbrot par 100 +RTS -N2 -s&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Par Monad&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Goal&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;be more explicit about granularity and data dependences &lt;/li&gt;
&lt;li&gt;Avoid the reliance on lazy evaluation, but without sacrificing the
  determinism that we value for parallel programming.&lt;/li&gt;
&lt;li&gt;The parallel computations are pure (and deterministic)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The library is implemented entirely as a Haskell library&lt;ul&gt;
&lt;li&gt;You can accommodate alternative scheduling strategies.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Par Monad&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Par monad - a monad for parallel computation &lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kr"&gt;newtype&lt;/span&gt; &lt;span class="kt"&gt;Par&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;

&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kt"&gt;Applicative&lt;/span&gt; &lt;span class="kt"&gt;Par&lt;/span&gt;
&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kt"&gt;Monad&lt;/span&gt; &lt;span class="kt"&gt;Par&lt;/span&gt;

&lt;span class="nf"&gt;runPar&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Par&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;    &lt;span class="c1"&gt;-- produce a pure result.&lt;/span&gt;
&lt;span class="nf"&gt;fork&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Par&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Par&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;-- the way to create parallel tasks&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;IVar - results are communicated through IVars&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;IVar&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; 

&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Par&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;IVar&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;put&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;NFData&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IVar&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Par&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;get&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IVar&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Par&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;


&lt;hr&gt;
&lt;h4&gt;Par Monad&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;IVar&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;IVar&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; 

&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Par&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;IVar&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;put&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;NFData&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IVar&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Par&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;get&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IVar&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Par&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IVar&lt;/code&gt; -- as a box that stars empty&lt;/li&gt;
&lt;li&gt;&lt;code&gt;put&lt;/code&gt; -- store a value in the box &lt;ul&gt;
&lt;li&gt;All values communicated through IVars are fully evaluated. There is a head-strict version &lt;code&gt;put_&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get&lt;/code&gt; -- read the value. If the box is empty, it waits until the box is filled
  by put. The &lt;code&gt;get&lt;/code&gt; operation does not remove the value from the box. Once the
  box is full. It stays the state constantly.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Par Monad&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Example &lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;runPar&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;
    &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;
    &lt;span class="n"&gt;fork&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;fork&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/24606632@N05/25642271873/in/dateposted-public/" title="par_monad"&gt;&lt;img src="https://farm2.staticflickr.com/1609/25642271873_74a6b5c51e_c.jpg" width="800" height="230" alt="par_monad"&gt;&lt;/a&gt;&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Par Monad&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spawn&lt;/code&gt; - Like fork, but returns a IVar that can be used to query the result
    of the forked computation. Therefore spawn provides &lt;strong&gt;futures&lt;/strong&gt; or
    &lt;strong&gt;promises&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parMap&lt;/code&gt; - parallel version map implemented with par monad&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- Yen3: need to review how to use `spawn` individually.  --&gt;

&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;NFData&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Par&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Par&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;IVar&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;spawn&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;
    &lt;span class="n"&gt;fork&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="nf"&gt;parMap&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;NFData&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Par&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;parMap&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;ibs&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;mapM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt;
    &lt;span class="n"&gt;mapM&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;ibs&lt;/span&gt;
&lt;/pre&gt;


&lt;!--
f :: a -&gt; b
return . f :: a -&gt; m b
spawn . return . f :: a -&gt; Par (IVar a)
--&gt;

&lt;hr&gt;
&lt;h4&gt;Example - prime number&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Example&lt;ul&gt;
&lt;li&gt;&lt;code&gt;primeIntVector&lt;/code&gt; - Eval monad &lt;/li&gt;
&lt;li&gt;&lt;code&gt;primeIntVector'&lt;/code&gt; - Par monad &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;primeIntVector&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;VU&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Vector&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="nf"&gt;primeIntVector&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt;
        &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;genNumberRange&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
    &lt;span class="kr"&gt;in&lt;/span&gt;
        &lt;span class="kt"&gt;VU&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uncurry&lt;/span&gt; &lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;parList&lt;/span&gt; &lt;span class="n"&gt;rseq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nf"&gt;primeIntVector'&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;VU&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Vector&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="nf"&gt;primeIntVector'&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt;
        &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;genNumberRange&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
    &lt;span class="kr"&gt;in&lt;/span&gt;
        &lt;span class="kt"&gt;VU&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;Par&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runPar&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;Par&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parMap&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uncurry&lt;/span&gt; &lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;
&lt;/pre&gt;


&lt;hr&gt;
&lt;h4&gt;Difference between &lt;code&gt;Par&lt;/code&gt; and &lt;code&gt;Eval&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Par Monad &lt;ol&gt;
&lt;li&gt;Always evaluate its value to normal form. It avoids the problem
   about the weak-normal form&lt;/li&gt;
&lt;li&gt;The cost of calling &lt;code&gt;runPar&lt;/code&gt; function is bigger then &lt;code&gt;runEval&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Easy to redefine the scheduling strategy&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Difference between &lt;code&gt;Par&lt;/code&gt; and &lt;code&gt;Eval&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Eval Monad&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Need use &lt;code&gt;force&lt;/code&gt; function to evaluate its value from weak-head normal
   form to normal form. It’s suitable for lazy data structure&lt;/li&gt;
&lt;li&gt;The cost of calling &lt;code&gt;runEval&lt;/code&gt; function is free&lt;/li&gt;
&lt;li&gt;Provide the speculative parallelism &lt;/li&gt;
&lt;li&gt;Eval Monad has more diagnostics in ThreadScope compared Par Monad.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/23326920/difference-between-par-monad-and-eval-monad-with-deepseq"&gt;Reference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--- What’s the pitfall of Eval Monad ? --&gt;

&lt;!--- What’s the pitfall of Par Monad ?--&gt;

&lt;hr&gt;
&lt;h4&gt;Repa&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Repa - REgular PArallel arrays&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Goal&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;efficient numerical array computations in Haskell and run them in
  parallel &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It could provides efficient unboxed data computation, but not Par monad and
  Strategy monad   &lt;ul&gt;
&lt;li&gt;Repa also support boxed data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Repa - type&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The array type&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; -  representation type &lt;/li&gt;
&lt;li&gt;&lt;code&gt;e&lt;/code&gt; - element type &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sh&lt;/code&gt; - the shape of array (the dimension(s) of array)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Z&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Z&lt;/span&gt;    &lt;span class="c1"&gt;-- scalar data&lt;/span&gt;
&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="kt"&gt;:.&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="kt"&gt;:.&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;

&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;DIM0&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Z&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;DIM1&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;DIM0&lt;/span&gt; &lt;span class="kt"&gt;:.&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;DIM2&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;DIM1&lt;/span&gt; &lt;span class="kt"&gt;:.&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;/pre&gt;


&lt;hr&gt;
&lt;h4&gt;Repa - array&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;how to create an array with &lt;code&gt;Array&lt;/code&gt; type ?&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fromListUnboxed&lt;/code&gt; - from list of unboxed type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fromUnboxed&lt;/code&gt; - from the vector with &lt;code&gt;Data.Vector.Unboxed&lt;/code&gt; type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fromFunction&lt;/code&gt; - from the shape information to generate the array&lt;/li&gt;
&lt;li&gt;... etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;fromListUnboxed&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Shape&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Unbox&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="nf"&gt;fromFunction&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;D&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="nf"&gt;fromUnboxed&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Shape&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Vector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Unboxed&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
&lt;/pre&gt;


&lt;!-- 
the major difference between `fromListUnboxed` and `fromUnboxed`
   - `fromListUnboxed` - O(n). Convert a list to an unboxed vector array.
   - `fromUnboxed` - O(1). Wrap an unboxed vector as an array. 
--&gt;

&lt;hr&gt;
&lt;h4&gt;Repa - create array example&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Example - create an array&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Array.Repa&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromListUnboxed&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Z&lt;/span&gt; &lt;span class="kt"&gt;:.&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt; &lt;span class="kt"&gt;DIM1&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; 
&lt;span class="nf"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt; &lt;span class="kt"&gt;DIM1&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;

&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;  &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromFunction&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Z&lt;/span&gt; &lt;span class="kt"&gt;:.&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Z&lt;/span&gt; &lt;span class="kt"&gt;:.&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="nf"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;D&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Z&lt;/span&gt; &lt;span class="kt"&gt;:.&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;

&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.Vector.Unboxed&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;VU&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt; &lt;span class="kt"&gt;VU&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;VU&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enumFromN&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;VU&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Vector&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt; &lt;span class="kt"&gt;VU&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromUnboxed&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Z&lt;/span&gt; &lt;span class="kt"&gt;:.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;VU&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt; &lt;span class="kt"&gt;VU&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="nf"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Z&lt;/span&gt; &lt;span class="kt"&gt;:.&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;/pre&gt;


&lt;hr&gt;
&lt;h4&gt;Repa - array computation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;All array will transfer to a delayed array type (ex: &lt;code&gt;Array D sh e&lt;/code&gt;)
  after array computations (ex: &lt;code&gt;Repa.map&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kt"&gt;Repa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Shape&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Source&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;D&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+^&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Num&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Shape&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Source&lt;/span&gt; &lt;span class="n"&gt;r1&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Source&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt;
     &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;r1&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;D&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;


&lt;hr&gt;
&lt;h4&gt;Repa - compute&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;computeS&lt;/code&gt; - calculate the array operations in sequentially.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;computeP&lt;/code&gt; - the same as &lt;code&gt;computeS&lt;/code&gt; but in parallel.&lt;ul&gt;
&lt;li&gt;the purpose of the monad is only to ensure that &lt;code&gt;computeP&lt;/code&gt; operations are
  performed in sequence and not nested.&lt;ul&gt;
&lt;li&gt;the simplest way to reduce the monad effect -- &lt;code&gt;runIdentity&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;See page p.94 to get more information&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;computeS&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Load&lt;/span&gt; &lt;span class="n"&gt;r1&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;r1&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="nf"&gt;computeP&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Monad&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Source&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Load&lt;/span&gt; &lt;span class="n"&gt;r1&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;r1&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;hr&gt;
&lt;h4&gt;Repa - array computation example&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;calculate $e^x = \sum^{\infty}_{n=0}\frac{x^n}{n!} \forall x$&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Array.Repa&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad.Identity&lt;/span&gt;

&lt;span class="nf"&gt;fact&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foldr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nf"&gt;enumN&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;D&lt;/span&gt; &lt;span class="kt"&gt;DIM1&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;
&lt;span class="nf"&gt;enumN&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromFunction&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Z&lt;/span&gt; &lt;span class="kt"&gt;:.&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Z&lt;/span&gt; &lt;span class="kt"&gt;:.&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fromIntegral&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="nf"&gt;exp'&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;
&lt;span class="nf"&gt;exp'&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt;
             &lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enumN&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
             &lt;span class="n"&gt;ys&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;fromIntegral&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
                  &lt;span class="n"&gt;ns&lt;/span&gt; 
         &lt;span class="kr"&gt;in&lt;/span&gt;
             &lt;span class="n"&gt;runIdentity&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sumAllP&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;
&lt;/pre&gt;


wzxhzdk:32

--&amp;gt;

&lt;hr&gt;
&lt;h4&gt;Repa - example&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Example - prime numbers&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nf"&gt;primeArray&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;VU&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Vector&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="nf"&gt;primeArray&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt;
                   &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;genArray&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
                   &lt;span class="n"&gt;ps&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runIdentity&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="kt"&gt;Repa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;computeUnboxedP&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;primeArrayCheck&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
                        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt; &lt;span class="kt"&gt;DIM1&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
               &lt;span class="kr"&gt;in&lt;/span&gt;
                   &lt;span class="kt"&gt;VU&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Repa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toUnboxed&lt;/span&gt; &lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;hr&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The simplest parallel method - parallel map&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;parMap&lt;/code&gt; or &lt;code&gt;parList&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repa is useful especially for numeric calculation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The remaining part of &lt;a href="http://chimera.labs.oreilly.com/books/1230000000929"&gt;the book&lt;/a&gt;
  is about.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Parallel programming with GPU (&lt;a href="https://hackage.haskell.org/package/accelerate"&gt;&lt;code&gt;Data.Accelerate&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Concurrent programming&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bool unbxoed type ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>all</category><category>haskell</category><category>note</category><guid>https://yen3.github.io/posts/2016/20160405_a-primer-s-note-for-parallel-programming-in-haskell/</guid><pubDate>Tue, 05 Apr 2016 03:57:05 GMT</pubDate></item><item><title>How to find a string of a variable in Makefile ?</title><link>https://yen3.github.io/posts/2014/20140228_how-to-find-a-string-of-a-variable-in-makefile/</link><dc:creator>Yen3</dc:creator><description>&lt;div&gt;&lt;p&gt;其實這不是一個很難的問題，只是我對 makefile 格式不熟，解決這個問題大部分的時間是在找文件。
為什麼會有這個問題，只是上班的時候遇到解決了就記下來了 XD。&lt;/p&gt;
&lt;p&gt;以下面的例子來說，要在 &lt;code&gt;$(OPTION)&lt;/code&gt; 裡找是否有 &lt;code&gt;__TEST_2__&lt;/code&gt; 這個字串:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;OPTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; __TEST_1__
&lt;span class="nv"&gt;OPTION&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; __TEST_2__
&lt;span class="cp"&gt;ifneq (, $(findstring "__TEST_2__", $(OPTION)))&lt;/span&gt;
    &lt;span class="nv"&gt;RESULT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"find"&lt;/span&gt;
&lt;span class="cp"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;RESULT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Not find"&lt;/span&gt;
&lt;span class="cp"&gt;endif&lt;/span&gt;

&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @echo &lt;span class="k"&gt;$(&lt;/span&gt;RESULT&lt;span class="k"&gt;)&lt;/span&gt;
    @echo &lt;span class="k"&gt;$(&lt;/span&gt;OPTION&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;做個簡單的筆記。&lt;/p&gt;
&lt;h3&gt;Reference&lt;/h3&gt;
&lt;p&gt;這邊的 reference 是我找的時候所看到的資料，再加上 stackoverflow 的解說，對 makefile 有興趣的人可以看看 XD。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2886"&gt;跟我一起写 Makefile（一） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2887"&gt;跟我一起写 Makefile（二） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2888"&gt;跟我一起写 Makefile（三） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2889"&gt;跟我一起写 Makefile（四） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2890"&gt;跟我一起写 Makefile（五） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2891"&gt;跟我一起写 Makefile（六） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2892"&gt;跟我一起写 Makefile（七） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2893"&gt;跟我一起写 Makefile（八） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2894"&gt;跟我一起写 Makefile（九） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2895"&gt;跟我一起写 Makefile（十） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2896"&gt;跟我一起写 Makefile（十一） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2898"&gt;跟我一起写 Makefile（十二） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2898"&gt;跟我一起写 Makefile（十三） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2899"&gt;跟我一起写 Makefile（十四） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>all</category><category>murmur</category><category>note</category><guid>https://yen3.github.io/posts/2014/20140228_how-to-find-a-string-of-a-variable-in-makefile/</guid><pubDate>Fri, 28 Feb 2014 09:07:43 GMT</pubDate></item><item><title>Flask + jQuery 簡單筆記</title><link>https://yen3.github.io/posts/2013/20131013_flask-jquery-simple-practical-note/</link><dc:creator>Yen3</dc:creator><description>&lt;div&gt;&lt;p&gt;其實也沒什麼好說的，好好的看說明文件就寫的出來這樣子的東西。只是會這個東西就可以把 SNPA 的最後一塊拼圖拼出來 (但是要改很多東西，我好懶 XD)。先做個筆記，應該接下來的日子就會做出來了。&lt;/p&gt;
&lt;script src="https://gist.github.com/yen3/6960462.js"&gt;&lt;/script&gt;&lt;/div&gt;</description><category>all</category><category>note</category><category>programming</category><guid>https://yen3.github.io/posts/2013/20131013_flask-jquery-simple-practical-note/</guid><pubDate>Sun, 13 Oct 2013 10:04:17 GMT</pubDate></item><item><title>Vim plugin: Unite.vim</title><link>https://yen3.github.io/posts/2013/20131010_vim-plugin-unite-vim/</link><dc:creator>Yen3</dc:creator><description>&lt;div&gt;&lt;p&gt;關於 &lt;a href="https://github.com/Shougo/unite.vim"&gt;Shougo/unite.vim&lt;/a&gt; 沒什麼好說的，是一個用了會上癮的 plugin，用了它之後，ctrl+p 和 command-T 都可以不用了，開心 XD。&lt;/p&gt;
&lt;p&gt;在此稍微貼上自己關於這方面的 vim 設定檔&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安裝 plugin 部分 (這邊使用 &lt;a href="https://github.com/Shougo/neobundle.vim"&gt;Shougo/neobundle.vim&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;NeoBundle &lt;span class="s1"&gt;'Shougo/unite.vim'&lt;/span&gt;
NeoBundle &lt;span class="s1"&gt;'tsukkee/unite-tag'&lt;/span&gt;
NeoBundle &lt;span class="s1"&gt;'h1mesuke/unite-outline'&lt;/span&gt;
NeoBundle &lt;span class="s1"&gt;'tsukkee/unite-help'&lt;/span&gt;
NeoBundle &lt;span class="s1"&gt;'ujihisa/unite-launch'&lt;/span&gt;
NeoBundle &lt;span class="s1"&gt;'ujihisa/unite-colorscheme'&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;設定部分 (特別說明一點，如果要打開 windows 時為 insert mode，加入參數 &lt;code&gt;-start-insert&lt;/code&gt;，用法可以直接看下面)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="c"&gt;" Unite: {{{&lt;/span&gt;

&lt;span class="c"&gt;"" ctrl-p&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :Unite &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;start&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;insert file_rec/async buffer&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;"" shortcup&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  :&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Unite &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;start&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;insert mapping&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" Execute help.&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  :&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Unite &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;start&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;insert help&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;" Execute help by cursor keyword.&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  :&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;UniteWithCursorWord help&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" grep dictionay&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;s :Unite &lt;span class="k"&gt;grep&lt;/span&gt;:. &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" outline&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt; ::Unite outline&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" yank history&lt;/span&gt;
&lt;span class="c"&gt;"let g:unite_source_history_yank_enable = 1&lt;/span&gt;
&lt;span class="c"&gt;"nnoremap &amp;lt;leader&amp;gt;y :Unite history/yank&amp;lt;CR&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" }}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>all</category><category>note</category><category>software</category><guid>https://yen3.github.io/posts/2013/20131010_vim-plugin-unite-vim/</guid><pubDate>Thu, 10 Oct 2013 14:23:44 GMT</pubDate></item><item><title>程式設計時的字型和顏色主題</title><link>https://yen3.github.io/posts/2013/20130924_about-font-and-color-theme-in-programming/</link><dc:creator>Yen3</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="http://www.flickr.com/photos/24606632@N05/9916270166/" title="Flickr 上 yen3rc 的 Screen Shot 2013-09-24 at 10.13.23 PM"&gt;&lt;img src="https://farm8.staticflickr.com/7410/9916270166_09850bc06a.jpg" width="500" height="283" alt="Screen Shot 2013-09-24 at 10.13.23 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;關於字型 Monaco 用了好多年了，還真的是沒什麼好挑剔的。但是最近嘗試改用 &lt;a href="https://github.com/adobe/source-code-pro"&gt;Source Code Pro&lt;/a&gt;，真的覺得這套字體還不錯看，所以我在我的 MacVim 及 Sublime Text 等其他的文字編輯器，能換的都換成這一套，有興趣的可以試試。&lt;/p&gt;
&lt;p&gt;關於 color theme，我使用的是  Tomorrow Light Bright (&lt;a href="https://github.com/chriskempson/tomorrow-theme"&gt;Tomorrow Light&lt;/a&gt;) ，雖然很多人說  &lt;a href="http://ethanschoonover.com/solarized"&gt;Solarized&lt;/a&gt; 很不錯，不過我還是喜歡看黑底灰字(或白字)的顏色，另外一個小的好處是 Tomorrow Light 的 github 有針對大部分常見的編輯軟體的設定檔，可以直接套用，相當方便。&lt;/p&gt;
&lt;p&gt;就是一個簡單的筆記哩。(工作天中間寫 blog 很累，但是還蠻開心的)，今天也順便把從 title 取檔名這件事改用 regex 來處理，出來的檔名會比較好看一點，不過至於中文標題的話 (這就是為什麼標題都是英文)，我可能要想想辦法讓它變成英文標題，不過現在還沒有什麼想法 XD。也讓 deploy command output 顯示在網頁上，這樣子比較方便看到結果，就不用切換到 terminal 上看了。&lt;/p&gt;
&lt;p&gt;話說這 package 現在應該是沒有人在用 (因為連 README 都沒寫)，不過我用的很開心 XD。&lt;/p&gt;
&lt;p&gt;打算寫 README 的時候應該是我已經把介面美化的差不多的時候了吧 XD。&lt;/p&gt;&lt;/div&gt;</description><category>all</category><category>note</category><category>tweet</category><guid>https://yen3.github.io/posts/2013/20130924_about-font-and-color-theme-in-programming/</guid><pubDate>Tue, 24 Sep 2013 14:03:14 GMT</pubDate></item><item><title>Note for vim mode in sublime text</title><link>https://yen3.github.io/posts/2013/20130923_note-for-vim-mode-in-sublime-text/</link><dc:creator>Yen3</dc:creator><description>&lt;div&gt;&lt;p&gt;(什麼，不是搜尋嗎 XD?)&lt;/p&gt;
&lt;p&gt;在 sublime text2 要把 vim mode 打開在 &lt;a href="https://yen3.github.io/posts/2013/20130923_note-for-vim-mode-in-sublime-text/%5Bhttp:/www.sublimetext.com/docs/2/vintage.html%5D(http:/www.sublimetext.com/docs/2/vintage.html)"&gt;Vintage Mode - Sublime Text 2 Documentation&lt;/a&gt; 有明確的解釋，但是記得往下拉，加上文件中的這一行，因為要把 ctrl mode 打開，才有辦法用 ctrl + f, b 上下頁 XD&lt;/p&gt;
&lt;pre class="code literal-block"&gt;"vintage_ctrl_keys": true
&lt;/pre&gt;&lt;/div&gt;</description><category>all</category><category>note</category><guid>https://yen3.github.io/posts/2013/20130923_note-for-vim-mode-in-sublime-text/</guid><pubDate>Mon, 23 Sep 2013 13:27:41 GMT</pubDate></item><item><title>Web Link Temp</title><link>https://yen3.github.io/posts/2013/web_link_temp_20130901/</link><dc:creator>Yen3</dc:creator><description>&lt;div&gt;&lt;p&gt;單純做個測試。看看這次我對在網路上看到的連結可以記錄到什麼地步(笑)。&lt;/p&gt;
&lt;h2&gt;Web Links&lt;/h2&gt;
&lt;h3&gt;Learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.cs.utexas.edu/~EWD/transcriptions/EWD10xx/EWD1036.html"&gt;E.W. Dijkstra Archive: On the cruelty of really teaching computing science (EWD 1036)&lt;/a&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Josh Ko 推薦，關於教育的問題。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Functional_reactive_programming"&gt;Functional reactive programming - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Josh Ko 推薦，曾經是一個可能的研究方向&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.incubaid.com/2012/03/28/the-game-of-distributed-systems-programming-which-level-are-you/"&gt;The Game of Distributed Systems Programming. Which Level Are You? « Incubaid Research&lt;/a&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Distributed System Programming 的數個境界討論&lt;ol&gt;
&lt;li&gt;Level 0: Clueless&lt;/li&gt;
&lt;li&gt;Level 1: RPC&lt;/li&gt;
&lt;li&gt;Level 2: Distributed Algorithms + Asynchronous messaging + Language support --- 這其中有提到數種 FPL 有原生支援。&lt;/li&gt;
&lt;li&gt;Level 3: Distributed Algorithms + Asynchronous messaging + Purity&lt;/li&gt;
&lt;li&gt;Level 4: Solid domination of distributed systems: happiness, piece of mind and a good night’s rest&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.sina.com.cn/s/blog_5d90e82f01018ge9.html"&gt;怎样写一个解释器_王垠_新浪博客&lt;/a&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用 Scheme 開發一個 interpter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Course&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cs.cmu.edu/~15150/previous-semesters/2012-spring/"&gt;15-150 Functional Programming, Spring 2012&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.cmu.edu/afs/cs/academic/class/15210-s12/www/"&gt;15-210 Parallel &amp;amp; Sequential Data Structures and Algorithms, Spring 2012&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Formal Language and Theory of computation&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://engineering.dartmouth.edu/~Amir_H_Golnabi/ENGS122_files/Lectures_Notes/Henzinger-Nerode-7.pdf"&gt;Lecture 7: Myhill-Nerode Theorem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://theory.stanford.edu/~trevisan/cs154-12/"&gt;Automata and Complexity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://theory.stanford.edu/~trevisan/cs172/"&gt;CS 172: Computability and Complexity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Functional Programming &amp;amp; Haskell&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://existentialtype.wordpress.com/2012/09/15/introductory-fp-course-materials/"&gt;Introductory FP Course Materials « Existential Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ihower.tw/blog/archives/6305?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+ihower+%28%7B%7Cihower.tw%7C+blog+%7D%29"&gt;Functional Programming for Java Developers 讀書摘要 | ihower { blogging }&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.willamette.edu/~fruehr/haskell/evolution.html"&gt;The Evolution of a Haskell Programmer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://acm.wustl.edu/functional/haskell.php"&gt;How to learn Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mvanier.livejournal.com/3917.html"&gt;Mike's World-O-Programming - Yet Another Monad Tutorial (part 1: basics)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.haskell.org/haskellwiki/H-99:_Ninety-Nine_Haskell_Problems"&gt;H-99: Ninety-Nine Haskell Problems - HaskellWiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://acm.wustl.edu/functional/hs-breads.php"&gt;Haskell Tutorial - Breadcrumbs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Development&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.javaworld.com.tw/roller/ingramchen/entry/composable_future_api"&gt;Composable Future API | Xexex's Java 和其他二三事&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scottmeyers.blogspot.com/2012/04/information-on-c11-memory-model.html"&gt;The View from Aristeia: Information on the C++11 Memory Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/"&gt;Essential JavaScript And jQuery Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fcamel-life.blogspot.com/2012/03/effective-c-item-31.html"&gt;fcamel 技術隨手記: Effective C++ item 31: 將檔案間的編譯依存關係降至最低&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Libraries&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sdiehl.github.com/gevent-tutorial/"&gt;Gevent Tutorial&lt;/a&gt; Asynchronous events programming in Python, but not counrrency&lt;/li&gt;
&lt;li&gt;&lt;a href="http://linas.org/linux/threads-faq.html"&gt;Linux Threads Home Page&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Linux threads 的發展與討論。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Development Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.worldhello.net/gotgithub/"&gt;GotGitHub — GotGitHub&lt;/a&gt; github 的書籍教程&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Vim&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://vim.spf13.com/"&gt;spf13-vim - The Ultimate Vim Distribution&lt;/a&gt; 介紹了一些好用的 vim plugins ，待整合到自己的 vim 之後就可移除&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog-mno2.csie.org/blog/2011/11/17/vim-plugins-for-haskell-programmers/"&gt;Vim Plugins for Haskell Programmers - MnO2's Blog&lt;/a&gt; 等我成為真正的 Haskell Programmer 之後就可以用到了。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bitc/lushtags"&gt;bitc/lushtags · GitHub&lt;/a&gt; Create ctags compatible tags files for Haskell programs&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;ZFS&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wiki.freebsd.org/RootOnZFS"&gt;RootOnZFS - FreeBSD Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.freebsd.org/RootOnZFS/GPTZFSBoot/9.0-RELEASE"&gt;RootOnZFS/GPTZFSBoot/9.0-RELEASE - FreeBSD Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Stream_processing"&gt;Stream processing - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.indiana.edu/~rrnewton/wavescope/WaveScope_+_WaveScript/WaveScope_Homepage.html"&gt;WaveScope + WaveScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dspace.mit.edu/bitstream/handle/1721.1/40095/MIT-CSAIL-TR-2008-005.pdf?sequence=1"&gt;dspace.mit.edu/bitstream/handle/1721.1/40095/MIT-CSAIL-TR-2008-005.pdf?sequence=1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Interesting&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.linuxlinks.com/article/2012042806090428/BenchmarkTools.html"&gt;6 Best Free Linux Benchmark Tools - Linux Links - The Linux Portal Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.linuxlinks.com/article/20120429003043955/LLCbench.html"&gt;LLCbench - Linux Links - The Linux Portal Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://icl.cs.utk.edu/projects/llcbench/"&gt;LLCbench Home Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Slides&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ihower.tw/blog/archives/7309/?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+ihower+%28%7B%7Cihower.tw%7C+blog+%7D%29"&gt;A brief introduction to SPDY – 邁向 HTTP/2.0 – 投影片 | ihower { blogging }&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ryudoawaru/webconf2013"&gt;Webconf2013-非典型貧窮網站維運經驗分享&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.monkeypotion.net/speech/designing-a-component-based-architecture-in-lua-for-game-apps"&gt;2012 台北遊戲App開發者論壇：Designing a Component-based Architecture in Lua for Game Apps &amp;gt;&amp;gt; 猴子靈藥 [Monkey Potion]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Others&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/3985324/download#"&gt;EtherCalc.tw&lt;/a&gt; 關於 EtherCalc.tw 的開發歷程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;HCI&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.vgod.tw/2009/12/07/text-editing/"&gt;[HCI] 淺談模式”mode”與文字編輯的技術與學習 | vgod's blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.vgod.tw/2009/10/02/fitts-law/"&gt;[HCI] 費茲定律Fitts’ Law與使用者介面設計 | vgod's blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.vgod.tw/2009/05/21/usability/"&gt;[HCI] 談人機介面設計與Usability | vgod's blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Apple&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://whiteappleer.tw/2011/02/27/the-story-of-apple-logo-design/"&gt;Apple logo 的誕生故事。 | wa+er.  白蘋果急救室&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://whiteappleer.tw/2010/12/07/iphone-develop-stories/"&gt;iPhone的誕生故事。 | wa+er.  白蘋果急救室&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://whiteappleer.tw/2010/10/24/the-story-of-ipod/"&gt;iPod 的誕生故事。 | wa+er.  白蘋果急救室&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://whiteappleer.tw/2011/03/25/the-store-of-mac-os-x-aqua-user-interface/"&gt;Mac OS X 介面的誕生故事。 | wa+er.  白蘋果急救室&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;xdite&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.xdite.net/posts/2012/03/17/website-online-todo/"&gt;網站程式上線前需要準備的事 （一） - Blog.XDite.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.xdite.net/posts/2012/03/18/website-online-todo-2/"&gt;網站程式上線前需要準備的事 （二） - Blog.XDite.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.xdite.net/posts/2012/03/18/website-online-todo-3/"&gt;網站程式上線前需要準備的事 （三） - Blog.XDite.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.xdite.net/posts/2012/03/18/website-online-todo-4/"&gt;網站程式上線前需要準備的事 （四） - Blog.XDite.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.xdite.net/posts/2012/03/19/website-online-todo-5/"&gt;網站程式上線前需要準備的事 （五） - Blog.XDite.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Research&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.computer.org/csdl/mags/cs/2012/06/mcs2012060008.html"&gt;Concurrency in Modern Programming Languages&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.gutenberg.org/"&gt;Project Gutenberg - free ebooks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cacm.acm.org/magazines/2012/5/148531-programming-the-global-brain/fulltext"&gt;Programming the Global Brain | May 2012 | Communications of the ACM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cacm.acm.org/magazines/2012/5/148571-comparative-analysis-of-protein-networks/fulltext"&gt;Comparative Analysis of Protein Networks: Hard Problems, Practical Solutions | May 2012 | Communications of the ACM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.computer.org/portal/web/computingnow"&gt;Latest Articles on ComputerTechnology | IEEE Computer Society&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cacm.acm.org/magazines/2012/5/148566-the-future-of-the-past/fulltext"&gt;The Future of the Past | May 2012 | Communications of the ACM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://cacm.acm.org/magazines/2012/5/148618-an-n-gram-analysis-of-communications-2000-2010/fulltext"&gt;An n-Gram Analysis of Communications 2000–2010 | May 2012 | Communications of the ACM&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://acm.wustl.edu/functional/hs-breads.php"&gt;Haskell Tutorial - Breadcrumbs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/"&gt;Essential JavaScript And jQuery Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cacm.acm.org/magazines/2012/4/147345-searching-the-village/abstract"&gt;Searching the Village: Models and Methods for Social Search | April 2012 | Communications of the ACM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cacm.acm.org/magazines/2012/4/147347-preserving-digital-data/abstract"&gt;Preserving Digital Data | April 2012 | Communications of the ACM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cacm.acm.org/magazines/2012/4/147348-talking-to-machines/abstract"&gt;Talking to Machines | April 2012 | Communications of the ACM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cacm.acm.org/magazines/2012/4/147352-what-agile-teams-think-of-agile-principles/abstract"&gt;What Agile Teams Think of Agile Principles | April 2012 | Communications of the ACM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cacm.acm.org/magazines/2012/4/147353-the-beauty-of-simplicity/fulltext"&gt;The Beauty of Simplicity | April 2012 | Communications of the ACM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cacm.acm.org/magazines/2012/4/147354-sample-size-in-usability-studies/abstract"&gt;Sample Size in Usability Studies | April 2012 | Communications of the ACM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cacm.acm.org/magazines/2012/4/147355-the-deadline-paradox/abstract"&gt;The Deadline Paradox | April 2012 | Communications of the ACM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cacm.acm.org/magazines/2012/4/147357-the-network-protocol-battle/abstract"&gt;The Network Protocol Battle | April 2012 | Communications of the ACM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cacm.acm.org/magazines/2012/4/147358-why-linq-matters/abstract"&gt;Why LINQ Matters: Cloud Composability Guaranteed | April 2012 | Communications of the ACM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cacm.acm.org/magazines/2012/4/147359-cpu-db-recording-microprocessor-history/abstract"&gt;CPU DB: Recording Microprocessor History | April 2012 | Communications of the ACM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>all</category><category>note</category><category>tweet</category><guid>https://yen3.github.io/posts/2013/web_link_temp_20130901/</guid><pubDate>Sun, 01 Sep 2013 01:01:23 GMT</pubDate></item></channel></rss>