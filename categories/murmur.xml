<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Yen3's note (murmur)</title><link>https://yen3.github.io/</link><description></description><atom:link href="https://yen3.github.io/categories/murmur.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sun, 27 Dec 2015 10:32:17 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>murmur (10) - mkd &amp; LaTeX</title><link>https://yen3.github.io/posts/2015/20151227_murmur-text-file-format/</link><dc:creator>Yen3</dc:creator><description>&lt;div&gt;&lt;p&gt;其實這個 blog 壞掉很久了，因為 nikola 更新之後會強制把整個 &lt;code&gt;output&lt;/code&gt; folder 重刷，我之前在上面硬幹用 git 上傳到 github 的方式就不能用了，因為 nikola 已經提供了 &lt;code&gt;nikola github_deploy&lt;/code&gt; 的指令，但是暫時沒有東西想寫所以也不理它，今天突然想寫點廢話的時候 ... 覺得還是要修一修了 XD 照著 &lt;a href="https://getnikola.com/handbook.html#deploying-to-github"&gt;nikola handbook&lt;/a&gt; 的說明，倒也是很快就修好了，而且這個方式也比我之前用的好的多，也可以利用 github 備份整個 source，算是很方便的方式，這樣子我也不用研究 Travis CI 了 XD。&lt;/p&gt;
&lt;p&gt;近一兩年來大部分寫筆記的方式都是使用 markdown (mkd)，但是最近應該會重建 LaTeX 的寫作環境，專門拿來做筆記用 (其實我也沒有多少筆記要做 XD)，倒也不是說 mkd 不好，而是自己的龜毛病發作 XD。我自己數學不好，所以其實也沒有多少數學式要寫，用 LaTeX 單純只是圖一個精準而己。寫 mkd 的時候，每個軟體 render 出來的結果不盡相同 (試試 subitem 配合 code block)，暫時解法是以 MacDown 的顯示為基準。目前的想法是速記還是以 mkd 為主，如果要寫長一點的筆記還是會回歸到 LaTeX (XeLaTeX) 上。&lt;/p&gt;
&lt;p&gt;2015 年的 LaTeX 中文處理使用 xeCJK 處理起來應該都不會有太大的問題。在 Mac OS X 上的 LaTeX 編輯環境 TeXShop 仍是第一首選。不過因為愛用 vim 的緣故，參考 XOO 的 blog 設定 (&lt;a href="https://xcycl.wordpress.com/2013/01/20/os-x-%E7%9A%84-latex-%E5%AF%AB%E4%BD%9C%E7%92%B0%E5%A2%83/"&gt;OS X 的 LATEX 寫作環境&lt;/a&gt;, &lt;a href="https://xcycl.wordpress.com/2013/11/10/os-x-%E4%B8%8A%E8%87%AA%E5%8B%95%E7%B7%A8%E8%AD%AF-latex-%E8%88%87%E8%87%AA%E5%8B%95%E6%9B%B4%E6%96%B0/"&gt;OS X 上自動編譯 LATEX 與自動更新&lt;/a&gt;)，使用上亦相當順暢。&lt;/p&gt;
&lt;p&gt;今天也利用空閒時間小小的修改 TeXShop 的 article 及 beamer template，主要是加上 xeCJK support 及 minted package 的 syntax highlighting (終於不是 verbatim 了~!)。重新開始的原因是之前的版面設定檔案隨著硬碟洗掉而消失了，放在自己的 github &lt;a href="https://github.com/yen3/latex_template"&gt;repo&lt;/a&gt; 上也算是幫自己做備份。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;看看自己可以撐多久 XD &lt;/p&gt;&lt;/div&gt;</description><category>all</category><category>murmur</category><guid>https://yen3.github.io/posts/2015/20151227_murmur-text-file-format/</guid><pubDate>Sun, 27 Dec 2015 03:12:30 GMT</pubDate></item><item><title>murmur (9) - Just for fun - Add from 0 to n in parallel</title><link>https://yen3.github.io/posts/2015/20151006_murmur-9-just-for-fun-add-from-0-to-n-in-parallel/</link><dc:creator>Yen3</dc:creator><description>&lt;div&gt;&lt;p&gt;I stuided the &lt;a href="https://hackage.haskell.org/package/repa"&gt;repa&lt;/a&gt; package today. I discover it supports parallel computation for both boxed type and unboxed type rather then only for unboxed type. It reminds me that I have to read the manual carefully.&lt;/p&gt;
&lt;p&gt;Repa supports doing sum computation in parallel (see &lt;code&gt;sumP&lt;/code&gt; in &lt;a href="https://hackage.haskell.org/package/repa-3.4.0.1/docs/Data-Array-Repa.html"&gt;repa doc&lt;/a&gt;). I just write a parallel sum function for fun.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Array.Repa&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Repa&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.Vector.Unboxed&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;VU&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad.Identity&lt;/span&gt;

&lt;span class="nf"&gt;sumR&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;
&lt;span class="nf"&gt;sumR&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt;
            &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;VU&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enumFromN&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
        &lt;span class="kr"&gt;in&lt;/span&gt;
            &lt;span class="n"&gt;runIdentity&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Repa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sumAllP&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Repa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromUnboxed&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Z&lt;/span&gt; &lt;span class="kt"&gt;:.&lt;/span&gt; &lt;span class="kt"&gt;VU&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;sumR&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="mi"&gt;100000000&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Tomorrow's goal: &lt;a href="https://hackage.haskell.org/package/accelerate"&gt;Accelerate package&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>all</category><category>haskell</category><category>murmur</category><guid>https://yen3.github.io/posts/2015/20151006_murmur-9-just-for-fun-add-from-0-to-n-in-parallel/</guid><pubDate>Tue, 06 Oct 2015 14:10:48 GMT</pubDate></item><item><title>我的計算機探索</title><link>https://yen3.github.io/posts/2015/20150326_my_exploratation_about_cs/</link><dc:creator>Yen3</dc:creator><description>&lt;div&gt;&lt;p&gt;大家好，我是 Wen-Shih Chao，從大學之後大家都叫我 Yen3，我是從這個系上的大學和研究所畢業的，今天很開心 Chun-Liang Lee 老師給我這個機會來說明分享一下自己的故事，我有很多事情想要說，希望可以在半個小時講完。&lt;/p&gt;
&lt;p&gt;我從很小的時候開始使用電腦，一直到高中的時候才開始學習程式設計。高一上的時候我參加了彰中電研社學習程式設計，但是我上了兩次社課聽不懂之後就放棄了。在那個時候的我以為我這輩子應該會去念個中文系，這輩子不再碰電腦之類的。結果在高一下的時候學校的老師開設了一個學習如何寫 C++ 的課程 ，那時候的我心想，這可能是我最後一次機會開始學習程式設計了，報名參加之後，我對我高中的印象最深的就是常常拿 A4 紙出來練習寫程式碼，學習如何寫程式來解決問題，就這樣子渡過了我的高中生涯，但是因為高中玩社團玩了兩年，且我也不太會念書，在最後一年不希望自己後悔的狀況下，成績還算普通的考上了這裡。&lt;/p&gt;
&lt;p&gt;剛進大學其實也不是很清楚知道自己想要做什麼，但是沒有好好念書這一項，能翹課就翹，曾經有一段時間，不管上麼課，都是帶程式設計的書在課堂上看，然後回宿舍就拼命玩電腦遊戲和寫程式。或許是因為寫程式可以找到自己的成就感，不過更多的是把程式寫出來的開心，也因為個性因素使然，剛開始的大學生活朋友並不多，在這段時期幾乎把全部的心力投注在這裡面。這樣子行為直接反應在我的大學成績裡面，不過我也並不在乎，總覺得活的像自己就好了。&lt;/p&gt;
&lt;p&gt;高中寫程式的時候，因為是與很多朋友一起寫程式，所以要寫什麼程式我並沒有思考太多，而大一大二的時候，除了課堂上的程式設計題目，老實說我並不知道我想要解決什麼問題，在那個時候做的就是拼命買書看書，在那個時候看了很多關於 C++ 與軟體工程的書，開始思考程式該長成什麼樣子，該解決怎麼樣的問題 ? 電腦的軟體與硬體如何互動，電腦的計算能力是否有所極限 ? 這些問題都變成我這幾年來一直在思考的問題。而這些問題有些有了答案，而有些到現在還在思考，為什麼要思考這些的問題呢 ? 因為我想要讓自己程式寫出更快的程式。&lt;/p&gt;
&lt;p&gt;看起來人生好像很認真，其實不然，大學是我看最多日劇與動漫的時候，也常常躲起來無所事事好幾天。曾經有一天我朋友問我有去上課的朋友，你有看到 Yen3 嗎 ? 他好像好幾天沒來上課了，但是其實我都在看海賊王動畫或日劇之類的。但是之後不要讓朋友擔心，我還是上課去，但是我很確定在課堂上不是在做該課堂的事 (笑)。&lt;/p&gt;
&lt;p&gt;而且大學的時候對自己一直都很沒有自信，因為只喜歡寫程式，而且以社會的觀感來看，我念了一間普通的大學，成績也普普通通，生活也很普通，並沒有特別努力像名人傳記一樣力爭上游。這樣子的生活下去會怎麼樣好像是看的出來的。但也因為如此，我也過的蠻開心的。當然有機會的時候會想要好好表現自己，不過好像都失敗了，幸好當下都不覺得會影響到自己想做的事。&lt;/p&gt;
&lt;p&gt;在大學的時候，我跟著 cllee 老師參加了兩個比賽，所幸都沒有得獎。一個是比賽撰寫矩陣相乘程式的比賽，在這 cllee 老師的指導下順利的完成，但是程式跑出來的時間整整多別人了一倍。我們在賽後與 cllee 老師一起尋找為什麼比別人慢的原因。程式比別人慢沒關係，找到原因下次總是會比較快。&lt;/p&gt;
&lt;p&gt;另外一個比賽是從提案到實作及報告自己想法的 App 比賽，這個比賽讓我暫離技術層面以外的問題，去加以了解一個點子的發想及實現，除了寫程式還有許多重要的事，但是除了寫程式以外的事，我好像也沒有會多少，我從這次也了解從創意發想到完成的過程中，我所喜歡扮演的角色。&lt;/p&gt;
&lt;p&gt;後來考研究所的時候，處於一個隨便的狀態，於是就直升了自己學校的研究所，很幸運的跟 Yung-Cheng Ma 老師做研究，他是一個做研究很嚴格但是待人很好的老師，他教我最重要的事就是，寫程式只是解決問題的方式之一，重點是你想要解決什麼問題。他完全讓我體會沒有任何想法根本無法解決問題，更遑論寫程式了，在那個當下，我真的覺得研究所這兩年過的頂痛苦的 (笑)。不過我一直到現在都記得他跟我說的一段話。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;寫程式並不是最重要的，找到想要解決什麼問題是最重要的。然後把你想要解決問題的相關領域學習起來。舉個例子來說 MIT Media lab 裡面的人，有歷史系、美術系與心理系等等，但是計算機科學系的比例並不是特別的大。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;研究所之後呢 ? 負擔著對於研究的害怕及對於自己只會寫程式的茫然，在博士班及當兵的時候試著逃脫這個想法，但是始終沒有什麼好成果。但是慢慢的知道自己只會寫程式相關部分，那麼把解決問題需要但是自己不會的部分再慢慢學習起來就是了。&lt;/p&gt;
&lt;p&gt;在計算機科學這個領域，我過的很開心，對我來說，學習計算機科學就是面對真實的自己，電腦不會騙人，要不他人出錯了，要不我出錯了，但是我比較笨，我出錯的機率應該相對較高。計算機科學是需要用精確的語言來描述自己想法的世界。&lt;/p&gt;
&lt;p&gt;我一向認為我不聰明，只是我一向對自己想要做什麼事不太知道怎麼放棄，也就這樣子過到了現在。在這個生活中，我只是專注在自己想做的事上，我覺得我很幸運，因為這個興趣可以讓我有份工作而且活的不錯。&lt;/p&gt;
&lt;p&gt;最後，我想說明為什麼會有這個探索的過程 ? 簡單來說，在時間有限的狀況下，我會選擇自己想做的事來做，因為我一向很難專注，我會覺得很多事很有趣，但是專注一件事足以把嘗試許多有趣的事時間吃掉。所以我得選擇我把時間分配到什麼事情上。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果這件事值得我花時間，那麼我就會去做。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;祝各位可以找到自己想做的事，這並不容易，我自己也在尋找，一起加油吧。&lt;/p&gt;
&lt;h2&gt;What we can do now practically&lt;/h2&gt;
&lt;p&gt;講完一個簡單的故事，我想嘗試說幾個當初如果我大一就知道事會很棒的事，金玉良言一向都容易理解但是不容易體會。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;開始時間管理 - 因為時間有限，但想做的事有很多。對我來說時間管理是取捨的藝術。我每個一段時間就會重看 &lt;a href="https://www.youtube.com/watch?v=JKBFwR1HIFU"&gt;Randy Pausch - Time management (中文字幕)&lt;/a&gt;，如果你有興趣也可以看看。&lt;/li&gt;
&lt;li&gt;嘗試從網路上學習，並與人討論 - 自學通常最大的問題來自於沒有人可以討論及自我反省不一定有用，可以看看 &lt;a href="https://www.coursera.org/"&gt;Coursera&lt;/a&gt; 或 &lt;a href="https://www.edx.org/"&gt;edx&lt;/a&gt;，好好跟完一兩門課，你會發現你有許多有趣的改變。&lt;/li&gt;
&lt;li&gt;最後，也是最重要的，把我上述提到的三個網址點開來看看。因為大一的我是看過就算的 (笑)。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Finally&lt;/h2&gt;
&lt;p&gt;然後，我們可以開始來講一些其他的有趣部分 :) 因為前面的訊息如果有機會，我相信你已經在聽我演講之前看完了。&lt;/p&gt;
&lt;p&gt;如何知道自己對這門學系有沒有興趣 ? 這其實不容易，你可以詢問你自己，是否願意勉強自己做一些不喜歡的事 ? 這跟喜歡打籃球棒球一樣，你喜歡，但是你一定要做基礎訓練才打的好，但是做基礎訓練很痛苦，不做又打不好一樣。每個學門或專業都有你不喜歡做的事，端看你能不能為了你想要做的事來忍受這些不喜歡的事。&lt;/p&gt;
&lt;p&gt;舉個例子來說，我大一的時候英文其實差到不行，計算機概論的課本第一頁就看了一個小時，第二個還是看了一個小時，後來才慢慢開始變快。這件事在看 C++ 相關的書的時候又重演了，第一頁看了二個小時，第二頁還是看了兩個小時，不斷的重覆到看一頁只需要二十分鐘。一直到現在，我看某些英文書還是很慢，但是為了要理解，只能不斷的逼迫自己做自己不喜歡的事直到熟練為止。&lt;/p&gt;
&lt;p&gt;有時候可以強迫自己做一些不擅長的事，會有一些意想不到的進步。就像我最近要強迫自己看不想看的平行程式設計書籍一樣 … 真的是很難，但是不看懂不行 (笑)。&lt;/p&gt;
&lt;p&gt;如果自己對這個系沒有興趣怎麼辦 ? 你還有很多時間可以重來，但是如果不敢重來，我相信人生就是這樣子一步一步的過，然後就這樣子結束了，這也是你的選擇。&lt;/p&gt;
&lt;p&gt;想顧好學業，也想要有愛情，更想要有多采多姿的大學生活，該怎麼辦 ? 時間有限，能力與精神也有限，如果你覺得你很聰明可以顧好全部的事，就去做，如果不行要硬幹，也去做，不管怎麼樣，你總是可以從中學習到你自己與時間。但是盡可能不要發生到大四甚至後來才哭哭啼啼說大學應該要好好努力的過，當初應該多看點書之類的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;試想想你現在要怎麼過，以後才不會想要說後悔的話。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;謝謝你耐心聽完我講了三十分鐘的故事(其實應該會超過三十分鐘)，如果你睡著了，至少我們渡過一段愉快的時間，而且等一下就可以吃披薩了(耶~)，如果你可以從中獲益，謝謝你喜歡。&lt;/p&gt;
&lt;h2&gt;Q &amp;amp; A&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Q: 以資工系的角度來說，微積分與普物重不重要 ?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是重要的，雖然這兩堂課並不能一定實際運用，但是可以教會你怎麼思考一個問題轉換成數學問題。&lt;/li&gt;
&lt;li&gt;微積分很可愛，試想想為什麼可以從 FTC 開始就可以串起全部的故事。&lt;/li&gt;
&lt;li&gt;大一的學習其實是打基礎，不妨利用這種時間思索想要解決什麼問題，以及你要用什麼方式來解決。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q: 我們現在學的是 C++ ，看起來業界是需要 C 的人才，我們會需要學習 C 嗎 ?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不管那裡都會需要會解決問題的人。建議先學好一種語言，以大家所知的程式語言來說，學會一個語言之後，要在短時間內上手另外一個語言難度並不高 (但是要精通該語言還是需要很多時間)。&lt;/li&gt;
&lt;li&gt;學好程式語言與程式設計是相當重要的，以我的角度來說，學會程式設計與思考要解決什麼問題兩個是同等重要的問題。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q: 如果遇到不會寫的程式怎麼辦 ?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果覺得是自己現在無法決解決的程式而且用盡了辦法，就放著，然後有一天想到了就解決他。&lt;/li&gt;
&lt;li&gt;學習已經從考試變成你要怎麼面對自己的一個故事 :)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q: 大一學生可以練習什麼程式呢 ?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建議可以上 coursera 修課，是一個不錯的選擇。&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh-tw.coursera.org/course/interactivepython1"&gt;Introduction to Python&lt;/a&gt;，會教你 Python 入門，最後的期末作業是用 Python 做出一個遊戲。&lt;/li&gt;
&lt;li&gt;也有所謂的網頁設計課程，Big Data (其實是 Data mining/ Machine learning 課程)，以及其他零零總總的課程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果是單純的想要練習邏輯的話，可以考慮 &lt;a href="http://uva.onlinejudge.org/"&gt;UVA Online Judge&lt;/a&gt; 或 &lt;a href="https://projecteuler.net/"&gt;Project Euler&lt;/a&gt;，可以跟同學一起練習。&lt;/li&gt;
&lt;li&gt;如果有興趣的話，我們可以一起討論該如何進行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q: 大學最該做的一件事與最不該做的一件事 ?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最該做的一件事: 去旅行，去一些你過往不會去的地方 (但盡可能確保安全)。我們都以為我們了解了這個社會，其實我們只知道都市的繁榮或鄉村的溫暖，但是很難去理解都市與鄉村中還存在些什麼。&lt;/li&gt;
&lt;li&gt;最不該做的一件事: 為了學分去修一門爛課，人生有限，不要浪費時間，盡可能修自己喜歡的課。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;我想感謝我的很多朋友在這段時間的相處，其實這個探索過程並不孤獨，在大一的時候遇到 Josh Ko，他比我聰明，也更認真及堅定追求自己想要的，現在是一名博士後研究員了，他讓我學會很多很多事，fire7617, eating, Clara, decay, Melting 都是我在大學時候的朋友。yi-chen 在我人生很沮喪的時候陪我渡過很多日子直到現在 :)。很多老師 cllee, ycma, gwchen, scm ... 及很多朋友 (jaiyalas, chi-en, godfat) 幫了很多忙，因為這不是論文致謝，就此打住，如果有一天還有機會寫的話，那名字大概就會很多書的感謝名字列表一樣長吧 XD。&lt;/p&gt;&lt;/div&gt;</description><category>all</category><category>murmur</category><guid>https://yen3.github.io/posts/2015/20150326_my_exploratation_about_cs/</guid><pubDate>Thu, 26 Mar 2015 13:56:00 GMT</pubDate></item><item><title>murmur (7) - 慢與前進</title><link>https://yen3.github.io/posts/2015/20150118_murmur-about-attitude-of-life/</link><dc:creator>Yen3</dc:creator><description>&lt;div&gt;&lt;p&gt;從決定了一件很重要的事情以來，心情終於平靜了很多。人總是會有所傍偟，但是還可以堅定的朝自己的路前進。&lt;/p&gt;
&lt;p&gt;其實過往的自己有提到慢即是快的哲學，但是我覺得我自己並沒有懂過。最近在看一些書，學習一些事情的時候，其實並不能太在乎自己可以學習的多快，而是自己有沒有把看到的確實理解。不然其實我還是要重看重新想很多遍，反而更浪費時間。不過也因為如此，慎選自己看的資料，就算看到不好的資料也當成一種思維練習。希望重覆這個行為，能讓自己的想事情的方式更加穩定吧。&lt;/p&gt;
&lt;p&gt;穩定下來，才會有辦法做自己想做的事。現在的我是這樣子想的。&lt;/p&gt;
&lt;p&gt;前幾天有與人聊到，要不要把網路上過往的自己的所做所為刪除掉。我的回答是，不想也做不到。我在網路上 po 的文章也是過往的自己做的。就保持過往的自己會很好。我的過往是一個小屁孩與中二的集合體，也做了很多得罪人也讓人不開心的事，所幸沒發生大事情，在這邊表示一個抱歉 (不過我估計也沒有人會看的到，也好，下次遇到每一個想道歉的人就好好的道歉)。但是也因為過往的自己與這些經歷造就了現在的自己，總是會帶著微笑觀看自己的過往，期待現在與未來的生活可以繼續的進步了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;前幾天開始 review 自己寫的 &lt;a href="https://github.com/yen3/simple-nikola-post-admin"&gt;SNPA&lt;/a&gt;，SNPA 是一個針對 &lt;a href="http://getnikola.com/"&gt;nikola&lt;/a&gt; (a static blogging system)，寫的個一個小程式，主要功能為提供一個網頁介面可以新增, 編輯及刪除 nikola 的文章 (唉，就是檔案啦)。介面還可以，不過程式碼爛到我想重寫了 XD，本體的 code 倒是不多，300 行上下，所以今年應該會找個機會重寫整個 code 吧，然後希望可以改成用 nikola plugin 的型式。&lt;/p&gt;
&lt;p&gt;這一年使用下來，介面還算滿意，其實現在都習慣使用 markdown 來寫簡單的 blog article ，我會需要 markdown preview 功能，但是不需要與寫作區域並行，我會因為這樣子容易分心。不過長時間使用下來會發現介面上有一些不需要的額外元素，之後也可以一並移除掉就是了。還有其他許許多多的改進可以做。就看自己有沒有機會啦 XD。&lt;/p&gt;
&lt;iframe src="https://www.flickr.com/photos/24606632@N05/15685024973/player/" width="500" height="443" frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;</description><category>all</category><category>murmur</category><guid>https://yen3.github.io/posts/2015/20150118_murmur-about-attitude-of-life/</guid><pubDate>Sun, 18 Jan 2015 00:04:11 GMT</pubDate></item><item><title>2015 年目標</title><link>https://yen3.github.io/posts/2015/20150103_the-goal-for-2015/</link><dc:creator>Yen3</dc:creator><description>&lt;p&gt;完成 2014 年目標。&lt;/p&gt;</description><category>all</category><category>murmur</category><guid>https://yen3.github.io/posts/2015/20150103_the-goal-for-2015/</guid><pubDate>Sat, 03 Jan 2015 15:06:22 GMT</pubDate></item><item><title>How to find a string of a variable in Makefile ?</title><link>https://yen3.github.io/posts/2014/20140228_how-to-find-a-string-of-a-variable-in-makefile/</link><dc:creator>Yen3</dc:creator><description>&lt;div&gt;&lt;p&gt;其實這不是一個很難的問題，只是我對 makefile 格式不熟，解決這個問題大部分的時間是在找文件。
為什麼會有這個問題，只是上班的時候遇到解決了就記下來了 XD。&lt;/p&gt;
&lt;p&gt;以下面的例子來說，要在 &lt;code&gt;$(OPTION)&lt;/code&gt; 裡找是否有 &lt;code&gt;__TEST_2__&lt;/code&gt; 這個字串:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;OPTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; __TEST_1__
&lt;span class="nv"&gt;OPTION&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; __TEST_2__
&lt;span class="cp"&gt;ifneq (, $(findstring "__TEST_2__", $(OPTION)))&lt;/span&gt;
    &lt;span class="nv"&gt;RESULT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"find"&lt;/span&gt;
&lt;span class="cp"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;RESULT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Not find"&lt;/span&gt;
&lt;span class="cp"&gt;endif&lt;/span&gt;

&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @echo &lt;span class="k"&gt;$(&lt;/span&gt;RESULT&lt;span class="k"&gt;)&lt;/span&gt;
    @echo &lt;span class="k"&gt;$(&lt;/span&gt;OPTION&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;做個簡單的筆記。&lt;/p&gt;
&lt;h3&gt;Reference&lt;/h3&gt;
&lt;p&gt;這邊的 reference 是我找的時候所看到的資料，再加上 stackoverflow 的解說，對 makefile 有興趣的人可以看看 XD。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2886"&gt;跟我一起写 Makefile（一） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2887"&gt;跟我一起写 Makefile（二） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2888"&gt;跟我一起写 Makefile（三） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2889"&gt;跟我一起写 Makefile（四） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2890"&gt;跟我一起写 Makefile（五） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2891"&gt;跟我一起写 Makefile（六） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2892"&gt;跟我一起写 Makefile（七） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2893"&gt;跟我一起写 Makefile（八） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2894"&gt;跟我一起写 Makefile（九） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2895"&gt;跟我一起写 Makefile（十） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2896"&gt;跟我一起写 Makefile（十一） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2898"&gt;跟我一起写 Makefile（十二） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2898"&gt;跟我一起写 Makefile（十三） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/haoel/article/details/2899"&gt;跟我一起写 Makefile（十四） - 陈皓专栏　【空谷幽兰，心如皓月】 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>all</category><category>murmur</category><category>note</category><guid>https://yen3.github.io/posts/2014/20140228_how-to-find-a-string-of-a-variable-in-makefile/</guid><pubDate>Fri, 28 Feb 2014 09:07:43 GMT</pubDate></item><item><title>murmur (4) - 思考</title><link>https://yen3.github.io/posts/2014/20140203_murmur-4/</link><dc:creator>Yen3</dc:creator><description>&lt;div&gt;&lt;p&gt;好久沒有用這裡寫篇廢話了 XD&lt;/p&gt;
&lt;p&gt;做個簡單的修改測試。&lt;/p&gt;&lt;/div&gt;</description><category>all</category><category>murmur</category><guid>https://yen3.github.io/posts/2014/20140203_murmur-4/</guid><pubDate>Mon, 03 Feb 2014 02:38:26 GMT</pubDate></item><item><title>murmur (3) - 明白</title><link>https://yen3.github.io/posts/2013/20131102_murmur-get-the-idea-for-something/</link><dc:creator>Yen3</dc:creator><description>&lt;div&gt;&lt;p&gt;明白，原來不會寫 haskell 是因為沒寫 haskell。我上手 python 非常快的原因是，我把日常工作的大小事都交給它了 (到現在我還是不會寫 shell script XD)，今天嘗試寫 hasekll 的一個自動安裝程式，關於自己以前看過 haskell 書中的想法一一在腦中產生。&lt;/p&gt;
&lt;p&gt;不會用是因為沒有去用，這還蠻有趣的。&lt;/p&gt;&lt;/div&gt;</description><category>all</category><category>murmur</category><guid>https://yen3.github.io/posts/2013/20131102_murmur-get-the-idea-for-something/</guid><pubDate>Sat, 02 Nov 2013 04:01:37 GMT</pubDate></item><item><title>murmur (2) - 一張 CD 一萬塊</title><link>https://yen3.github.io/posts/2013/20131030_old-link-for-the-value-between-hi-fi-system-and-music/</link><dc:creator>Yen3</dc:creator><description>&lt;div&gt;&lt;p&gt;連結: &lt;a href="http://blog.roodo.com/honeypie/archives/17305241.html"&gt;地下鄉愁藍調:一張CD一萬塊 - 樂多日誌&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因為最近有了收入，所以最近最常買的東西其實是 CD 。說是 CD 其實也不精確，買的其實是 iTunes 上的檔案，一張專輯倒也好算，新台幣 200 就可以買回一段聽音樂很好的時光。&lt;/p&gt;
&lt;p&gt;買 CD (其實我還是喜歡這樣子稱呼) 對我來說其實是一個很好的回憶，過往花了很多時間在下載一堆 MP3 上，前陣子買入 iTunes Match 來升級早期下載的歌曲，但對於一些自己聽了十年的歌，我選擇慢慢的一張一張買回正版，不僅僅是為了聽到純粹的感動，也是為了對創作者的敬意。&lt;/p&gt;
&lt;p&gt;真的要我去買實體 CD 其實是不甚樂意的，因為我拿到 CD 的第一個動作，轉成無損音質的 apple lossless (m4a) 檔案，之後就把 CD 放入防潮箱，我不否認專輯封面到整個內容的呈現都是一種藝術，MV 的拍攝也是一種藝術，到現在都沒有辦法忘記看到 Linkin Park - Breaing the habit 的震憾 (也包括看到 Marron5 - Payphone 的無言)，但我想，花最多時間的，還是在聽音樂本身。&lt;/p&gt;
&lt;p&gt;這麼多年來，其實並不想成為一個專業聽音樂的人，因為聽的音樂很雜，只是單純喜歡聽音樂的開心，或許，就這樣子買 CD 下去吧。&lt;/p&gt;
&lt;p&gt;其實在這中間想到一個很有趣的問題，不知道現在有沒有人在做數位遺產。我覺得在未來這十年甚至更久，都是一個值得討論的課題 (例如: 我買了電子書, 音樂及軟體要怎麼繼承給人 ?) 也因為價值及永不損壞的關係，繼承是否要錢 ? 有趣的議題。&lt;/p&gt;
&lt;p&gt;不過，還是很歡迎，有什麼關於音樂有趣的事都可以討論，但是要注意的，我並不是一個專業人士，連拍子都分不清楚 (上次聽 Cindylinz 說才知道原來流行音樂有節拍這件事，不過也應該要有，並不是每個人都跟我一樣無知 XD)。&lt;/p&gt;&lt;/div&gt;</description><category>all</category><category>murmur</category><guid>https://yen3.github.io/posts/2013/20131030_old-link-for-the-value-between-hi-fi-system-and-music/</guid><pubDate>Wed, 30 Oct 2013 14:38:15 GMT</pubDate></item></channel></rss>