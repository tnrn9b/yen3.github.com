<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Yen3's note (vim)</title><link>https://yen3.github.io/</link><description></description><atom:link href="https://yen3.github.io/categories/vim.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 12 Nov 2015 03:44:13 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using VIM as a default text editor</title><link>https://yen3.github.io/posts/2013/20131109_using-vim-as-a-default-text-editor/</link><dc:creator>Yen3</dc:creator><description>&lt;div&gt;&lt;p&gt;寫這篇的最大理由是，大概從三四年前就會把自己的 vimfiles 介紹給身邊的朋友使用，但是因為 &lt;code&gt;.vimrc&lt;/code&gt; 裡面眾多的快捷鍵設定很懶的一一說明(每給一個就要介紹一次)，我還是乖乖的寫一篇文章好了，也算是這陣子調整 vim 的紀念。&lt;/p&gt;
&lt;p&gt;要注意的是，這個設定檔很大程度針對 C/C++ 做了最佳化，接下來要做的是針對 Python 及 Haskell 做一些調整，不過目前還沒有想到要做什麼調整，但是先針對目前的版本寫東西出來吧。&lt;/p&gt;
&lt;p&gt;找 vim 教學的文章最大的問題就是你有可能找到很多年以前的，如果是移動的文章或許還好，但是關於 plugin 的話，我自己的經驗是，幾乎每年都在變化，所以學習 vimscript 也是一個不錯的選擇。&lt;/p&gt;
&lt;h3&gt;Install&lt;/h3&gt;
&lt;h4&gt;Install Vim&lt;/h4&gt;
&lt;h5&gt;Mac OSX&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安裝 command line tools&lt;/p&gt;
&lt;pre class="code literal-block"&gt;   xcode-select --install
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安裝 &lt;a href="http://brew.sh/"&gt;homebrew&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安裝會用到的軟體&lt;/p&gt;
&lt;pre class="code literal-block"&gt;   brew install lua ctags cscope
   sudo rm -f /usr/bin/ctags
   sudo ln -s /usr/local/bin/ctags /usr/bin/ctags
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(Optional) 安裝 python 所需的套件 (需先用 homebrew 安裝 python)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;pip install pyflakes
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Optional) 安裝 haskell 所需的套件 (需先用 homebrew 安裝 haskell-platform)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;cabal install hasktags
cabal install hlint
&lt;/pre&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安裝 Vim&lt;/p&gt;
&lt;pre class="code literal-block"&gt;   brew install vim --with-lua --with-python
&lt;/pre&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;Linux&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;By package-manger&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ubuntu&lt;/p&gt;
&lt;pre class="code literal-block"&gt;sudo apt-get install ctags cscopes vim
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fedora&lt;/p&gt;
&lt;pre class="code literal-block"&gt;sudo yum install ctags cscopes vim
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compile from source code&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="x"&gt;hg clone https://vim.googlecode.com/hg/ vim&lt;/span&gt;
&lt;span class="x"&gt;cd vim&lt;/span&gt;
&lt;span class="x"&gt;hg pull&lt;/span&gt;
&lt;span class="x"&gt;hg update&lt;/span&gt;
&lt;span class="x"&gt;./configure --prefix="&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/usr"  --enable-multibyte --with-tlib=ncurses --enable-cscope --with-features=huge &lt;/span&gt;
&lt;span class="x"&gt;make &lt;/span&gt;
&lt;span class="x"&gt;make install&lt;/span&gt;
&lt;/pre&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Windows&lt;/h5&gt;
&lt;p&gt;雖然可以直接從 &lt;a href="http://www.vim.org"&gt;官網&lt;/a&gt; 直接下載可安裝執行檔，不過要有心理準備執行起來會很慢。我是直接在 Windows 上安裝 &lt;a href="http://www.vagrantup.com/"&gt;vagrant&lt;/a&gt; 開 VM 之後執行 Vim，相關的 &lt;a href="http://docs.vagrantup.com/v2/synced-folders/basic_usage.html"&gt;sync folder&lt;/a&gt; 設定好其實用起來也沒這麼麻煩。&lt;/p&gt;
&lt;h4&gt;Install vimfiles&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For Mac OSX and Linux: 這邊是我自己寫的 vimfiles ，以下會針對這份設定做一些必要的說明。 安裝完之後會把自己的設定蓋掉，所以有必要請自己先&lt;strong&gt;備份&lt;/strong&gt;。安裝方法如下。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;git clone https://github.com/yen3/vimfiles
cd vimfiles
chmod 755 install.sh
./install.sh
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Windows: 懶的另外寫安裝說明，因為要做的事有很多，真的想要安裝的可以來信問我怎麼裝。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How to install plugins manually&lt;/h3&gt;
&lt;p&gt;要裝自己的 plugins 之前，建議先安裝 &lt;a href="https://github.com/Shougo/neobundle.vim"&gt;NeoBundle&lt;/a&gt; ，先裝 &lt;a href="https://github.com/Shougo/neobundle.vim"&gt;NeoBundle&lt;/a&gt; 的好處是之後只要在 &lt;code&gt;vimrc&lt;/code&gt; 寫上該 plugin 的 github url 就可以安裝, 更新與刪除。&lt;/p&gt;
&lt;p&gt;安裝方法請參考 &lt;a href="https://github.com/Shougo/neobundle.vim"&gt;NeoBundle&lt;/a&gt; 的說明。安裝完之後就可以在 vimrc 裡面寫上想要安裝的 plugins，在這份設定檔中有做進一步的簡單設定，讓預設開啟 vim 的速度較快。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install plugins: 儲存 vimrc 後就會詢問是否要安裝，如果沒有也可以直接輸入 &lt;code&gt;:NeoBundleInstall&lt;/code&gt;, 以下是安裝 plugins 的範例。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;" install a plugin and load by default
NeoBundle "scrooloose/nerdcommenter"

" install a plugin and load by filetype
NeoBundleLazy 'plasticboy/vim-markdown', { 'autoload' : {
      \ 'filetypes' : 'mkd'
      \ }}
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove plugin: 在那一行刪除後並不會實際的把檔案移除掉，但就不會在 vim 開啟時載入該 plugins。如果想要完全移除可以輸入 &lt;code&gt;:NeoBundleClean&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Update all plugins: 直接輸入 &lt;code&gt;:NeoBundleUpdate&lt;/code&gt; 就可以更新所有的 plugins&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下所有的 plugins 都是使用 NeoBundle 安裝，所以你可以在 vimrc 中找到相關的描述，輕鬆的自行移除。強烈建議好好讀 plugins 的文件，方可以發揮 plugins 的全部功能。&lt;/p&gt;
&lt;h3&gt;Edit &amp;amp; Move&lt;/h3&gt;
&lt;p&gt;text editor 的霸主是什麼呢 ? 還是 text editor。回歸編輯的本質，其實最重要的是要學會 Vim 的 normal mode, insert mode, visual mode 的切換與精妙之處。可以優雅的完成每個編輯動作，這才是用 Vim 的精神所在。&lt;/p&gt;
&lt;p&gt;一開始建議先看 &lt;a href="http://www.slideshare.net/c9s/vim-hacks"&gt;c9s - Vim hacks&lt;/a&gt;，對於整個 vim 有一個整體的認識。從這篇可以學到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vim 的學習曲線相當陡，需要耐心學習。&lt;/li&gt;
&lt;li&gt;normal mode, insert mode, visual mode 的切換及 key mapping&lt;/li&gt;
&lt;li&gt;如何快速的移動，一般我最常用的其實是 w/ b, f/F(除了常見編緝以外)&lt;/li&gt;
&lt;li&gt;善用 plugins 幫你的 vim 增加威力，但是現在建議使用 NeoBundle 來安裝，並不建議使用 vimana，最大的原因是 c9s 現在也沒有在維護了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再來可以看 &lt;a href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/"&gt;YBlog - Learn Vim Progressively&lt;/a&gt; 來增加你的編輯及移動速度，畢竟，在 Vim 上最可貴的就是這個部分。&lt;/p&gt;
&lt;p&gt;最後，你可以把 &lt;a href="http://blog.vgod.tw/wp-content/uploads/2009/12/vgod-vim-cheat-sheet-full.pdf"&gt;vgod - Vim 命令圖解&lt;/a&gt; 貼在你的牆上，當作你的備忘。(我有貼，不過似乎也很少在看 XD)&lt;/p&gt;
&lt;h3&gt;Before reading the following sections&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;如果你安裝的是我的設定檔，下列的快捷鍵都可以直接使用，無需做任何修改。&lt;/strong&gt;而我列出相關說明的原因是可以讓你自己較容易的去修改這個設定檔。&lt;/p&gt;
&lt;h3&gt;General keymapping&lt;/h3&gt;
&lt;h4&gt;Split window&lt;/h4&gt;
&lt;p&gt;這功能是內建，但是相當的實用。&lt;/p&gt;
&lt;p&gt;快捷鍵如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl+w, v&lt;/code&gt;: split a new window in right side.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+w, s&lt;/code&gt;: split a new windows in below side.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Tab page&lt;/h4&gt;
&lt;p&gt;關於 tab page keymapping 的設定最早來自於 yzlin，不過現在他的 blog 已經無法連上，所以我直接就設定檔做說明。&lt;/p&gt;
&lt;p&gt;快捷鍵如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;,tc&lt;/code&gt;: New tab&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,te&lt;/code&gt;: edit tab &lt;/li&gt;
&lt;li&gt;&lt;code&gt;,tm&lt;/code&gt;: Move tab&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,tk&lt;/code&gt;: Close tab&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + H&lt;/code&gt;: Previous tab&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + L&lt;/code&gt;: Next tab&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tt&lt;/code&gt;: switch to last used tab&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;設定檔內容如下: &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="s2"&gt;" &amp;lt;leader&amp;gt;: `,`&lt;/span&gt;
&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Ctrl&lt;/span&gt;
&lt;span class="s2"&gt;" nmap: nomral mode keymapping&lt;/span&gt;

&lt;span class="s2"&gt;nmap &amp;lt;leader&amp;gt;tc :tabnew&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;nmap &amp;lt;leader&amp;gt;te :tabedit&amp;lt;SPACE&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;nmap &amp;lt;leader&amp;gt;tm :tabmove&amp;lt;SPACE&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;nmap &amp;lt;leader&amp;gt;tk :tabclose&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;nmap &amp;lt;C-H&amp;gt; :tabprev&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;nmap &amp;lt;C-L&amp;gt; :tabnext&amp;lt;CR&amp;gt;&lt;/span&gt;

&lt;span class="s2"&gt;autocmd TabLeave * let g:LastUsedTabPage = tabpagenr()&lt;/span&gt;
&lt;span class="s2"&gt;function! SwitchLastUsedTab()&lt;/span&gt;
&lt;span class="s2"&gt;    if exists("&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;LastUsedTabPage&lt;/span&gt;&lt;span class="s2"&gt;")&lt;/span&gt;
&lt;span class="s2"&gt;        execute "&lt;/span&gt;&lt;span class="nx"&gt;tabnext&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;LastUsedTabPage&lt;/span&gt;
    &lt;span class="nx"&gt;endif&lt;/span&gt;
&lt;span class="nx"&gt;endfunction&lt;/span&gt;

&lt;span class="nx"&gt;nmap&lt;/span&gt; &lt;span class="nx"&gt;tt&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt; &lt;span class="nx"&gt;SwitchLastUsedTab&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Indent&lt;/h4&gt;
&lt;p&gt;這個部分的 keymapping 的設定來自於 &lt;a href="http://www.slideshare.net/c9s/vim-hacks"&gt;c9s - Vim hacks&lt;/a&gt;，是一組相當簡單但相當實用的 keymapping。&lt;/p&gt;
&lt;p&gt;快捷鍵如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Tab&lt;/code&gt;: indent line(s) right&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shift + Tab&lt;/code&gt;: indent line(s) left&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;設定檔內容如下: &lt;/p&gt;
&lt;pre class="code literal-block"&gt;nmap &amp;lt;tab&amp;gt; v&amp;gt;
nmap &amp;lt;s-tab&amp;gt; v&amp;lt;
vmap &amp;lt;tab&amp;gt; &amp;gt;gv
vmap &amp;lt;s-tab&amp;gt; &amp;lt;gv
&lt;/pre&gt;


&lt;h4&gt;Programming&lt;/h4&gt;
&lt;p&gt;這個部分的 keymapping 的來源並不是這麼清楚，如果有人知道來源可以告知。&lt;/p&gt;
&lt;p&gt;快捷鍵如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;,m&lt;/code&gt;: run &lt;code&gt;make&lt;/code&gt; in the current working dictionary&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,n&lt;/code&gt;: run &lt;code&gt;make clean&lt;/code&gt; in the current working dictionary&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,q&lt;/code&gt;: Show compile errors in bottom window&lt;ul&gt;
&lt;li&gt;You can switch to the window and select the error to jump to the corresponding line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;設定檔內容如下: &lt;/p&gt;
&lt;pre class="code literal-block"&gt;nmap &amp;lt;leader&amp;gt;m :make&amp;lt;cr&amp;gt;
nmap &amp;lt;leader&amp;gt;n :make clean&amp;lt;cr&amp;gt;
nmap &amp;lt;leader&amp;gt;q :SQFix&amp;lt;cr&amp;gt;

com! -bang -nargs=? SQFix cal QFixToggle(&amp;lt;bang&amp;gt;0)
fu! QFixToggle(forced)
    if exists("g:qfix_win") &amp;amp;&amp;amp; a:forced == 0
        cclose
        unlet g:qfix_win
    else
        copen 10
        let g:qfix_win = bufnr("$")
        en
    endf
&lt;/pre&gt;


&lt;h3&gt;Plugins&lt;/h3&gt;
&lt;p&gt;最重要的大概是 autocomplete 及 Trace code 相關的 plugin，而其他有使用到的 plugins 也供參考。&lt;/p&gt;
&lt;h4&gt;Autocomplete&lt;/h4&gt;
&lt;p&gt;這個設定檔案採用 &lt;a href="https://github.com/Shougo/neocomplete.vim"&gt;neocomplete&lt;/a&gt; ( &lt;a href="https://github.com/Shougo/neocomplcache.vim"&gt;neocomplcache&lt;/a&gt; ) + &lt;a href="https://github.com/Shougo/neosnippet.vim"&gt;neosnippet.vim&lt;/a&gt;。 針對 &lt;a href="https://github.com/Shougo/neocomplete.vim"&gt;neocomplete&lt;/a&gt; 的設定直接參照 github 上 setting example 直接複製貼上到 &lt;code&gt;.vimrc&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;關於 code snippet 的部分，可以在 &lt;code&gt;~/.vim/bundle/neosnippet.vim/autoload/neosnippet/snippets&lt;/code&gt; 中看到有那些 snippets 可以觸發。以 C++ d的例子來說 &lt;code&gt;cpp.snip&lt;/code&gt; 的某一段是&lt;/p&gt;
&lt;pre class="code literal-block"&gt;snippet     class
abbr        class {}
    class &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c"&gt;#:name&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; {
        &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
    };
&lt;/pre&gt;


&lt;p&gt;所以在寫 C++ 程式時，輸入 &lt;code&gt;class&lt;/code&gt; 按 &lt;code&gt;Tab&lt;/code&gt; 之後就會產生相對應的結構，可以輸入完該 block 後按 &lt;code&gt;Tab&lt;/code&gt; 直到這個 snippet 輸入完成為止。其他語言也可以自行看看相關的 snippets。&lt;/p&gt;
&lt;h4&gt;Trace code&lt;/h4&gt;
&lt;h5&gt;ctags (build-in) &amp;amp; cscope&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;plugin&lt;ul&gt;
&lt;li&gt;ctags: build-in&lt;/li&gt;
&lt;li&gt;cscope: &lt;a href="http://github.com/simplyzhao/cscope_maps.vim"&gt;cscope_map.vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;快捷鍵如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按 &lt;code&gt;&amp;lt;F5&amp;gt;&lt;/code&gt; 即可在 current working dictionary 產生相對應的 tags。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctrl + ]&lt;/code&gt;: Jump to the definition&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + t&lt;/code&gt;: Back to the previous location &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;設定檔內容說明:&lt;/p&gt;
&lt;p&gt;在 trace code 前需要先在該 folder 產生相對應的 tag 檔。在 Vim 中輸入 &lt;code&gt;:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q . &amp;amp;&amp;amp; cscope -bR&lt;/code&gt; 即可，但是因為這個指令還蠻常用的，所以直接設定一個 keyborad shortcuts &lt;/p&gt;
&lt;pre class="code literal-block"&gt;autocmd FileType c,cpp nmap &amp;lt;silent&amp;gt;&amp;lt;F5&amp;gt; :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q . &amp;amp;&amp;amp; cscope -bR&amp;lt;CR&amp;gt;
autocmd FileType python nmap &amp;lt;silent&amp;gt;&amp;lt;F5&amp;gt; :!ctags -R .&amp;lt;CR&amp;gt;
autocmd FileType haskell nmap &amp;lt;silent&amp;gt;&amp;lt;F5&amp;gt; :!hasktags -c .&amp;lt;CR&amp;gt;
&lt;/pre&gt;


&lt;p&gt;這邊只針對了 C/ C++, Python 和 haskell 做設定，如果有需要可以自行加以修改。&lt;/p&gt;
&lt;h5&gt;CCTree&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;plugin: &lt;a href="https://github.com/vim-scripts/CCTree"&gt;cctree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;快捷鍵如下(當游標停留在 function name 上時):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;F6&lt;/code&gt;: build the database for cscope.out&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,,&lt;/code&gt;: Show the callers of the cursor word&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,.&lt;/code&gt;: Show the callees of the cursor word&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,w&lt;/code&gt;: Close the cctree window&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;設定檔內容說明: &lt;/p&gt;
&lt;p&gt;cctree 可以呈現 C 中 function 的 callers 與 callees，做的相關設定如下&lt;/p&gt;
&lt;pre class="code literal-block"&gt;autocmd FileType c,cpp nmap &amp;lt;silent&amp;gt;&amp;lt;F5&amp;gt; :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q . &amp;amp;&amp;amp; cscope -bR&amp;lt;CR&amp;gt;
nmap &amp;lt;silent&amp;gt;&amp;lt;F6&amp;gt; :CCTreeLoadDB cscope.out&amp;lt;CR&amp;gt;
&lt;/pre&gt;


&lt;p&gt;在使用 cctree 之前，要先使用 cscope 產生相對應的檔案，使用方法在 vim 中即是輸入 &lt;code&gt;&amp;lt;F5&amp;gt;&lt;/code&gt; 之後再按 &lt;code&gt;&amp;lt;F6&amp;gt;&lt;/code&gt; 即可完成初始化動作。&lt;/p&gt;
&lt;p&gt;使用的快捷鍵設定檔內容如下:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;" Cctree: {{{

set updatetime=0
let g:CTreeRecursiveDepth = 6
let g:CCTreeKeyTraceForwardTree = '&amp;lt;leader&amp;gt;.'
let g:CCTreeKeyTraceReverseTree = '&amp;lt;leader&amp;gt;,'
let g:CCTreeKeyToggleWindow = '&amp;lt;leader&amp;gt;w'

nnoremap &amp;lt;leader&amp;gt;. :CCTreeTraceForward &amp;lt;C-R&amp;gt;&amp;lt;C-w&amp;gt;&amp;lt;CR&amp;gt;
nnoremap &amp;lt;leader&amp;gt;, :CCTreeTraceReverse &amp;lt;C-R&amp;gt;&amp;lt;C-w&amp;gt;&amp;lt;CR&amp;gt;


" }}}
&lt;/pre&gt;


&lt;h5&gt;unite.vim (include unite-tag, unite-outline, unite-yank)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;plugin:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Shougo/unite.vim"&gt;unite.vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tsukkee/unite-tag"&gt;unite-tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Shougo/unite-outline"&gt;unite-outline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Shougo/unite-help"&gt;unite-help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ujihisa/unite-launch"&gt;unite-launch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ujihisa/unite-locate"&gt;unite-locate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/osyo-manga/unite-filetype"&gt;unite-filetype&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/thinca/vim-unite-history"&gt;vim-unite-history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Shougo/neobundle-vim-recipes"&gt;neobundle-vim-recipes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本上可以讓你快速搜尋任何事物(file, tag, outline, yank history, etc.)，可以說是 vim 最強大的 plugin 之一，常用快捷鍵如下，這些快捷鍵很重要，一定要記得。&lt;/p&gt;
&lt;p&gt;快捷鍵如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctrl + p&lt;/code&gt;: Function like &lt;a href="https://github.com/kien/ctrlp.vim"&gt;ctrlp.vim&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;,f&lt;/code&gt;: search cursor word in the tag file generate by ctags.&lt;/li&gt;
&lt;li&gt;The tag is included class/ struct, function name, macro, variable definition and etc. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;,ff&lt;/code&gt;: search in the tag file generate by ctags. &lt;/li&gt;
&lt;li&gt;The tag is included class/ struct, function name, macro, variable definition and etc. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;,s&lt;/code&gt;: grep the cursor word in the current working dictionary &lt;/li&gt;
&lt;li&gt;&lt;code&gt;,ss&lt;/code&gt;: grep in the current working dictionary&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,o&lt;/code&gt;: search outline of the file.&lt;ul&gt;
&lt;li&gt;If the file is source code, the outline is class/ struct, function name, macro, variable definition.&lt;/li&gt;
&lt;li&gt;If the file is markdown file, the outline is section header.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,l&lt;/code&gt;: search line in the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,h&lt;/code&gt;: search vim help&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,y&lt;/code&gt;: search yank history&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,u&lt;/code&gt;: search all shortcuts. You can use the shortcuts to list all keymappings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;設定檔內容如下: &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="s2"&gt;" Unite: {{{&lt;/span&gt;

&lt;span class="s2"&gt;let g:unite_enable_split_vertically = 1&lt;/span&gt;

&lt;span class="s2"&gt;let g:unite_source_file_mru_time_format = "&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="o"&gt;/%&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="s2"&gt;let g:unite_source_directory_mru_limit = 80&lt;/span&gt;
&lt;span class="s2"&gt;let g:unite_source_directory_mru_time_format = "&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="o"&gt;/%&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="s2"&gt;let g:unite_source_file_rec_max_depth = 5&lt;/span&gt;

&lt;span class="s2"&gt;let g:unite_enable_ignore_case = 1&lt;/span&gt;
&lt;span class="s2"&gt;let g:unite_enable_smart_case = 1&lt;/span&gt;

&lt;span class="s2"&gt;"" File search&lt;/span&gt;

&lt;span class="s2"&gt;nnoremap &amp;lt;silent&amp;gt;&amp;lt;C-p&amp;gt; :Unite -no-split -start-insert file_rec buffer&amp;lt;CR&amp;gt;&lt;/span&gt;

&lt;span class="s2"&gt;"" shortcup&lt;/span&gt;
&lt;span class="s2"&gt;nnoremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;u  :&amp;lt;C-u&amp;gt;Unite -start-insert mapping&amp;lt;CR&amp;gt;&lt;/span&gt;

&lt;span class="s2"&gt;"" Execute help.&lt;/span&gt;
&lt;span class="s2"&gt;nnoremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;h  :Unite -start-insert -no-split help&amp;lt;CR&amp;gt;&lt;/span&gt;

&lt;span class="s2"&gt;"" Tag search&lt;/span&gt;

&lt;span class="s2"&gt;"""&lt;/span&gt; &lt;span class="nx"&gt;For&lt;/span&gt; &lt;span class="nx"&gt;searching&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;cursor&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;
&lt;span class="nx"&gt;nnoremap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;silent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;leader&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Unite&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;:&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nx"&gt;nnoremap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;silent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;leader&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;ff&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Unite&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="nx"&gt;grep&lt;/span&gt; &lt;span class="nx"&gt;dictionay&lt;/span&gt;

&lt;span class="s2"&gt;""" For searching the word in the cursor in the current directory&lt;/span&gt;
&lt;span class="s2"&gt;nnoremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;s :Unite -no-split grep:.::&amp;lt;C-R&amp;gt;&amp;lt;C-w&amp;gt;&amp;lt;CR&amp;gt;&lt;/span&gt;

&lt;span class="s2"&gt;"""&lt;/span&gt; &lt;span class="nx"&gt;For&lt;/span&gt; &lt;span class="nx"&gt;searching&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="nx"&gt;handin&lt;/span&gt;
&lt;span class="nx"&gt;nnoremap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;silent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;leader&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;ss&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Unite&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt; &lt;span class="nx"&gt;grep&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="s2"&gt;""" For searching the word in the cursor in the current buffer&lt;/span&gt;
&lt;span class="s2"&gt;noremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;sf :Unite -no-split grep:%::&amp;lt;C-r&amp;gt;&amp;lt;C-w&amp;gt;&amp;lt;CR&amp;gt;&lt;/span&gt;

&lt;span class="s2"&gt;"""&lt;/span&gt; &lt;span class="nx"&gt;For&lt;/span&gt; &lt;span class="nx"&gt;searching&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;cursor&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;opened&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt;
&lt;span class="nx"&gt;noremap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;silent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;leader&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;sa&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Unite&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt; &lt;span class="nx"&gt;grep&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;$buffers&lt;/span&gt;&lt;span class="o"&gt;::&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;unite_source_grep_default_opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"-iRHn"&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;" --exclude='tags'"&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;" --exclude='cscope*'"&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;" --exclude='*.svn*'"&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;" --exclude='*.log*'"&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;" --exclude='*tmp*'"&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;" --exclude-dir='**/tmp'"&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;" --exclude-dir='CVS'"&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;" --exclude-dir='.svn'"&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;" --exclude-dir='.git'"&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;" --exclude-dir='node_modules'"&lt;/span&gt;

&lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="nx"&gt;outline&lt;/span&gt;
&lt;span class="nx"&gt;nnoremap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;leader&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Unite&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt; &lt;span class="nx"&gt;outline&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="nx"&gt;Line&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;
&lt;span class="nx"&gt;nnoremap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;leader&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Unite&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="nx"&gt;Yank&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;unite_source_history_yank_enable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nx"&gt;nnoremap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;leader&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;:&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Unite&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;yank&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;yank&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;cr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="s2"&gt;" Custom mappings for the unite buffer&lt;/span&gt;
&lt;span class="s2"&gt;autocmd FileType unite call s:unite_settings()&lt;/span&gt;
&lt;span class="s2"&gt;function! s:unite_settings()&lt;/span&gt;
&lt;span class="s2"&gt;  "&lt;/span&gt; &lt;span class="nx"&gt;Play&lt;/span&gt; &lt;span class="nx"&gt;nice&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;supertab&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;SuperTabDisabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="s2"&gt;" Enable navigation with control-j and control-k in insert mode&lt;/span&gt;
&lt;span class="s2"&gt;  imap &amp;lt;buffer&amp;gt; &amp;lt;C-j&amp;gt;   &amp;lt;Plug&amp;gt;(unite_select_next_line)&lt;/span&gt;
&lt;span class="s2"&gt;  imap &amp;lt;buffer&amp;gt; &amp;lt;C-k&amp;gt;   &amp;lt;Plug&amp;gt;(unite_select_previous_line)&lt;/span&gt;
&lt;span class="s2"&gt;endfunction&lt;/span&gt;

&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="nx"&gt;plugin&lt;/span&gt;
&lt;span class="err"&gt;"&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Unite&lt;/span&gt; &lt;span class="nx"&gt;neobundle&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Comment&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/scrooloose/nerdcommenter"&gt;nerdcommenter&lt;/a&gt;, The original keyboard shortcuts is as the follows.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;快捷鍵如下(After select in virtual mode.):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;,cc&lt;/code&gt;: Comment codes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,cu&lt;/code&gt;: Uncomment codes&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Emment&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;plugin: &lt;a href="https://github.com/mattn/emmet-vim"&gt;Emmet-vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果需要常常手寫 html code 的話，可以試試 &lt;a href="https://github.com/mattn/emmet-vim"&gt;Emmet-vim&lt;/a&gt;，舉個例子來說，輸入 &lt;code&gt;span.label.label-primary&lt;/code&gt; 然後按 &lt;code&gt;Ctrl+y ,&lt;/code&gt; 就可以變成 &lt;code&gt;&amp;lt;span class="label label-primary"&amp;gt;&lt;/code&gt;，是一個很方便的 plugin&lt;/p&gt;
&lt;h4&gt;Markdown&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;plugin: &lt;a href="https://github.com/plasticboy/vim-markdown"&gt;vim-markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這個 plugin 的功能可以看該 plugin 的說明，唯一要注意的是 filetype 是 mkd 而不是 markdown ，所以需要在 &lt;code&gt;.vimrc&lt;/code&gt; 中加上&lt;/p&gt;
&lt;pre class="code literal-block"&gt;au BufNewFile,BufRead *.md set filetype=mkd.makrdown
au BufNewFile,BufRead *.mkd set filetype=mkd.markdown
au BufNewFile,BufRead *.markdown set filetype=mkd.markdown
&lt;/pre&gt;


&lt;p&gt;才有辦法使用這個 plugin 的功能。&lt;/p&gt;
&lt;p&gt;對於 &lt;code&gt;mkd.markdown&lt;/code&gt; 稍微說明一下，Vim 7.0 以上支援 one file with multiple filetype，所以針對 markdown 也可以寫 &lt;code&gt;mkd.html&lt;/code&gt; 也是可行的。&lt;/p&gt;
&lt;h4&gt;Doxygen&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;plugin: &lt;a href="http://github.com/vim-scripts/DoxygenToolkit.vim"&gt;DoxygenToolkit.vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;快捷鍵如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;,d&lt;/code&gt;: 在 function/ class 前產生相對我的 doxygen-style comment。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;設定檔內容說明: &lt;/p&gt;
&lt;p&gt;Vim 7.0 以上內建支援 doxygen syntax highlighting，所以直接設定 filetype 即可&lt;/p&gt;
&lt;pre class="code literal-block"&gt;au BufNewFile,BufRead *.c set filetype=cpp.doxygen
au BufNewFile,BufRead *.cpp set filetype=cpp.doxygen
au BufNewFile,BufRead *.h set filetype=cpp.doxygen
&lt;/pre&gt;


&lt;h4&gt;vim-airline&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;plugin: &lt;a href="https://github.com/bling/vim-airline"&gt;vim-airline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;會讓 vim 的 status line 變的很 fancy，直接看截圖就可知道效果。&lt;/p&gt;
&lt;h4&gt;Beauity&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;plugin: &lt;a href="https://github.com/octol/vim-cpp-enhanced-highlight"&gt;vim-cpp-enhanced-highlight&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;顧名思義就是針對 C/ C++ 有額外的 syntax highlight support，可以自行選擇要不要裝。&lt;/p&gt;
&lt;h3&gt;Misc&lt;/h3&gt;
&lt;h4&gt;About autocomplete&lt;/h4&gt;
&lt;p&gt;其他方案如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/othree/vim-autocomplpop"&gt;vim-autocomplete&lt;/a&gt; + &lt;a href="https://github.com/garbas/vim-snipmate"&gt;vim-snipmate&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Valloric/YouCompleteMe"&gt;YouCompeleteMe&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而 &lt;a href="https://github.com/Shougo/neocomplete.vim"&gt;neocomplete&lt;/a&gt;, &lt;a href="https://github.com/Valloric/YouCompleteMe"&gt;YouCompeleteMe&lt;/a&gt; 皆有針對 C/C++ autocomplete 的支援，如果採用方案1，下面二個可以選擇其中一個來做選擇&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/vim-scripts/OmniCppComplete"&gt;OmniCppComplete&lt;/a&gt; - ctags base&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Rip-Rip/clang_complete"&gt;clang_complete&lt;/a&gt; - clang base &lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;tagbar&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;plugin: &lt;a href="http://majutsushi.github.io/tagbar/"&gt;tagbar&lt;/a&gt; (&lt;a href="https://github.com/majutsushi/tagbar"&gt;tagbar_github&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;快捷鍵如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;F3&lt;/code&gt;: tagbar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;設定檔說明如下: &lt;/p&gt;
&lt;p&gt;tagbar 本身也是仰賴 ctags 針對現在正在編輯的檔案產生相對應的 list，如果在 C/ C++ 裡面則會生成 macro list, function list, struct/ class list 等等，算是一個觀看這個檔案大綱很方便的工具(如果要跳的話建議使用 unite-outline)，這個 plugin 的 keyboard shortcut 設定如下&lt;/p&gt;
&lt;pre class="code literal-block"&gt;   nmap &amp;lt;silent&amp;gt;&amp;lt;F3&amp;gt; :TagbarToggle&amp;lt;CR&amp;gt;
&lt;/pre&gt;


&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;首先，我不知道會不會有人看到這裡，但是我想說這篇文章會持續修改。如果這些功能都會了，關於 vim 還有什麼事可以做的 ? 現在的我正在學 vimscript，以求可以對 vim 做更多的操控。也可以多多參考其他人的 vimrc，這也是一個很好的學習方式。我從 &lt;a href="https://raw.github.com/Shougo/shougo-s-github/master/vim/.vimrc"&gt;Shougo's vimrc&lt;/a&gt; 學到了很多有趣的技巧，有空也可以多多參考。&lt;/p&gt;&lt;/div&gt;</description><category>all</category><category>software</category><category>vim</category><guid>https://yen3.github.io/posts/2013/20131109_using-vim-as-a-default-text-editor/</guid><pubDate>Sat, 09 Nov 2013 05:46:21 GMT</pubDate></item></channel></rss>